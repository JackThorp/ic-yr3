<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="62:BlinkAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x2ae5031a95e8"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x2ae502fdab68"/></to>
    </wire>
    <wire loc="72:/usr/src/tinyos/tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x2ae502fdab68"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x2ae502fd5e18"/></to>
    </wire>
    <wire loc="64:BlinkAppC.nc">
      <from><interface-ref name="Timer0" scoped="" ref="0x2ae50318f578"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2ae5031eda60"/></to>
    </wire>
    <wire loc="52:/usr/src/tinyos/tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x2ae5031eda60"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x2ae5031e36a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="65:BlinkAppC.nc">
      <from><interface-ref name="Timer1" scoped="" ref="0x2ae5031a07d8"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2ae5033a3020"/></to>
    </wire>
    <wire loc="52:/usr/src/tinyos/tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x2ae5033a3020"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x2ae5031e36a0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:BlinkAppC.nc">
      <from><interface-ref name="Timer2" scoped="" ref="0x2ae50319b900"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2ae50339d550"/></to>
    </wire>
    <wire loc="52:/usr/src/tinyos/tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x2ae50339d550"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x2ae5031e36a0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="67:BlinkAppC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x2ae5031aa020"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x2ae503187d18"/></to>
    </wire>
    <wire loc="51:/usr/src/tinyos/tos/system/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x2ae503187d18"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x2ae5031be5e8"/></to>
    </wire>
    <wire loc="53:/usr/src/tinyos/tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x2ae502fd80e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2ae5031f10c0"/></to>
    </wire>
    <wire loc="67:/usr/src/tinyos/tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x2ae50317e490"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x2ae502edcbe8"/></to>
    </wire>
    <wire loc="53:/usr/src/tinyos/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x2ae502edcbe8"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x2ae502f99c00"/></to>
    </wire>
    <wire loc="68:/usr/src/tinyos/tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x2ae50317ee68"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2ae502fd4080"/></to>
    </wire>
    <wire loc="58:/usr/src/tinyos/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x2ae502fd4080"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2ae502fe7020"/></to>
    </wire>
    <wire loc="71:/usr/src/tinyos/tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x2ae50317d560"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x2ae502fd80e0"/></to>
    </wire>
    <wire loc="59:/usr/src/tinyos/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x2ae502fe1020"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x2ae5031617e8"/></to>
    </wire>
    <wire loc="61:/usr/src/tinyos/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MeasureClock" scoped="" ref="0x2ae502fe7d88"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2ae5031611b8"/></to>
    </wire>
    <wire loc="54:/usr/src/tinyos/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x2ae502fe76c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2ae5031dd2d8"/></to>
    </wire>
    <wire loc="62:/usr/src/tinyos/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x2ae502fe76c0"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x2ae502fdb558"/></to>
    </wire>
    <wire loc="46:/usr/src/tinyos/tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x2ae502fdb558"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x2ae502fed020"/></to>
    </wire>
    <wire loc="63:/usr/src/tinyos/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x2ae502fdbbe8"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x2ae502fe1cf0"/></to>
    </wire>
    <wire loc="48:/usr/src/tinyos/tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="SerialIdPin" scoped="" ref="0x2ae502ff3388"/></from>
      <to><interface-ref name="PortA4" scoped="" ref="0x2ae502ff8e00"/></to>
    </wire>
    <wire loc="141:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA4" scoped="" ref="0x2ae502ff8e00"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2ae503079740"/></to>
    </wire>
    <wire loc="49:/usr/src/tinyos/tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x2ae502feb4f8"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x2ae502fdbbe8"/></to>
    </wire>
    <wire loc="191:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG0" scoped="" ref="0x2ae50302a968"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae503111970"/></to>
    </wire>
    <wire loc="165:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD1" scoped="" ref="0x2ae5030174d0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2ae5030b2020"/></to>
    </wire>
    <wire loc="67:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x2ae5030b2020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae503517710"/></to>
    </wire>
    <wire loc="176:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE3" scoped="" ref="0x2ae50301a4d0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2ae5030b4d60"/></to>
    </wire>
    <wire loc="69:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x2ae5030b4d60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae503581710"/></to>
    </wire>
    <wire loc="185:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF3" scoped="" ref="0x2ae50302f1a0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2ae5030c95b8"/></to>
    </wire>
    <wire loc="69:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x2ae5030c95b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae5035fb710"/></to>
    </wire>
    <wire loc="143:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA6" scoped="" ref="0x2ae5030031a0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2ae503087a50"/></to>
    </wire>
    <wire loc="72:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x2ae503087a50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae5033f6710"/></to>
    </wire>
    <wire loc="183:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF1" scoped="" ref="0x2ae503023e00"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2ae5030cb2a8"/></to>
    </wire>
    <wire loc="67:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x2ae5030cb2a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae5035db710"/></to>
    </wire>
    <wire loc="146:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB0" scoped="" ref="0x2ae5030014d0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2ae50308fbd0"/></to>
    </wire>
    <wire loc="66:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x2ae50308fbd0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae50345b6a8"/></to>
    </wire>
    <wire loc="157:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC2" scoped="" ref="0x2ae503012658"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2ae50309e740"/></to>
    </wire>
    <wire loc="68:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x2ae50309e740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae5034af710"/></to>
    </wire>
    <wire loc="168:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD4" scoped="" ref="0x2ae503014968"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2ae5030af430"/></to>
    </wire>
    <wire loc="70:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x2ae5030af430"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae503531710"/></to>
    </wire>
    <wire loc="179:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE6" scoped="" ref="0x2ae503026968"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2ae5030c2120"/></to>
    </wire>
    <wire loc="72:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x2ae5030c2120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae50359c710"/></to>
    </wire>
    <wire loc="138:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA1" scoped="" ref="0x2ae502ffb968"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2ae50307c2a8"/></to>
    </wire>
    <wire loc="67:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x2ae50307c2a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae5033e86a8"/></to>
    </wire>
    <wire loc="149:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB3" scoped="" ref="0x2ae502ffe968"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2ae50308b020"/></to>
    </wire>
    <wire loc="69:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x2ae50308b020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae503452710"/></to>
    </wire>
    <wire loc="160:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC5" scoped="" ref="0x2ae50300eaf0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2ae50309abd8"/></to>
    </wire>
    <wire loc="71:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x2ae50309abd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae5034c8710"/></to>
    </wire>
    <wire loc="171:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD7" scoped="" ref="0x2ae50301fe00"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2ae5030ac8c8"/></to>
    </wire>
    <wire loc="73:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x2ae5030ac8c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae503527710"/></to>
    </wire>
    <wire loc="188:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF6" scoped="" ref="0x2ae50302c658"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2ae5030c5a50"/></to>
    </wire>
    <wire loc="72:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x2ae5030c5a50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae5035f2710"/></to>
    </wire>
    <wire loc="194:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG3" scoped="" ref="0x2ae503036348"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae503127020"/></to>
    </wire>
    <wire loc="174:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE1" scoped="" ref="0x2ae50301c1a0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2ae5030b6a50"/></to>
    </wire>
    <wire loc="67:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x2ae5030b6a50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae503587710"/></to>
    </wire>
    <wire loc="70:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x2ae503079740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae5033fd710"/></to>
    </wire>
    <wire loc="152:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB6" scoped="" ref="0x2ae503008020"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2ae503097430"/></to>
    </wire>
    <wire loc="72:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x2ae503097430"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae503468710"/></to>
    </wire>
    <wire loc="192:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG1" scoped="" ref="0x2ae503038020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae50311eab0"/></to>
    </wire>
    <wire loc="155:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC0" scoped="" ref="0x2ae503006348"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2ae5030a0500"/></to>
    </wire>
    <wire loc="66:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x2ae5030a0500"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae5034b56a8"/></to>
    </wire>
    <wire loc="166:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD2" scoped="" ref="0x2ae503016658"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2ae5030b1120"/></to>
    </wire>
    <wire loc="68:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x2ae5030b1120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae503514710"/></to>
    </wire>
    <wire loc="177:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE4" scoped="" ref="0x2ae503028658"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2ae5030b3e18"/></to>
    </wire>
    <wire loc="70:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x2ae5030b3e18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae50357e710"/></to>
    </wire>
    <wire loc="186:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF4" scoped="" ref="0x2ae50302e348"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2ae5030c8740"/></to>
    </wire>
    <wire loc="70:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x2ae5030c8740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae5035f8710"/></to>
    </wire>
    <wire loc="144:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA7" scoped="" ref="0x2ae503002348"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2ae503086bd8"/></to>
    </wire>
    <wire loc="73:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x2ae503086bd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae5033f3710"/></to>
    </wire>
    <wire loc="147:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB1" scoped="" ref="0x2ae503000658"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2ae50308ed60"/></to>
    </wire>
    <wire loc="67:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x2ae50308ed60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae503458710"/></to>
    </wire>
    <wire loc="158:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC3" scoped="" ref="0x2ae5030107e0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2ae50309c8c8"/></to>
    </wire>
    <wire loc="69:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x2ae50309c8c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae5034ac710"/></to>
    </wire>
    <wire loc="169:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD5" scoped="" ref="0x2ae503013af0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2ae5030ae5b8"/></to>
    </wire>
    <wire loc="71:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x2ae5030ae5b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae50352e710"/></to>
    </wire>
    <wire loc="180:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE7" scoped="" ref="0x2ae503025af0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2ae5030c12a8"/></to>
    </wire>
    <wire loc="73:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x2ae5030c12a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae503598710"/></to>
    </wire>
    <wire loc="139:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA2" scoped="" ref="0x2ae502ffaaf0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2ae50307b430"/></to>
    </wire>
    <wire loc="68:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x2ae50307b430"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae5033e5710"/></to>
    </wire>
    <wire loc="150:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB4" scoped="" ref="0x2ae50300baf0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2ae50308a120"/></to>
    </wire>
    <wire loc="70:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x2ae50308a120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae50344f710"/></to>
    </wire>
    <wire loc="161:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC6" scoped="" ref="0x2ae50300dc78"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2ae503099d60"/></to>
    </wire>
    <wire loc="72:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x2ae503099d60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae5034c4710"/></to>
    </wire>
    <wire loc="189:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF7" scoped="" ref="0x2ae50302b7e0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2ae5030d6bd8"/></to>
    </wire>
    <wire loc="73:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x2ae5030d6bd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae5035ef710"/></to>
    </wire>
    <wire loc="164:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD0" scoped="" ref="0x2ae503018020"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2ae5030a2e40"/></to>
    </wire>
    <wire loc="66:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x2ae5030a2e40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae50351a6a8"/></to>
    </wire>
    <wire loc="175:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE2" scoped="" ref="0x2ae50301b348"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2ae5030b5bd8"/></to>
    </wire>
    <wire loc="68:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x2ae5030b5bd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae503584710"/></to>
    </wire>
    <wire loc="184:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF2" scoped="" ref="0x2ae503030020"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2ae5030ca430"/></to>
    </wire>
    <wire loc="68:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x2ae5030ca430"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae5035fe710"/></to>
    </wire>
    <wire loc="195:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG4" scoped="" ref="0x2ae5030354d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae503122180"/></to>
    </wire>
    <wire loc="142:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA5" scoped="" ref="0x2ae503004020"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2ae5030888c8"/></to>
    </wire>
    <wire loc="71:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x2ae5030888c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae5033f9710"/></to>
    </wire>
    <wire loc="153:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB7" scoped="" ref="0x2ae5030071a0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2ae5030965b8"/></to>
    </wire>
    <wire loc="73:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x2ae5030965b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae503465710"/></to>
    </wire>
    <wire loc="182:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF0" scoped="" ref="0x2ae503024c78"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2ae5030cc1e8"/></to>
    </wire>
    <wire loc="66:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x2ae5030cc1e8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae5035de6a8"/></to>
    </wire>
    <wire loc="156:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC1" scoped="" ref="0x2ae5030054d0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2ae50309f5b8"/></to>
    </wire>
    <wire loc="67:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x2ae50309f5b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae5034b2710"/></to>
    </wire>
    <wire loc="167:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD3" scoped="" ref="0x2ae5030157e0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2ae5030b02a8"/></to>
    </wire>
    <wire loc="69:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x2ae5030b02a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae503534710"/></to>
    </wire>
    <wire loc="178:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE5" scoped="" ref="0x2ae5030277e0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2ae5030c3020"/></to>
    </wire>
    <wire loc="71:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x2ae5030c3020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae50359f710"/></to>
    </wire>
    <wire loc="187:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF5" scoped="" ref="0x2ae50302d4d0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2ae5030c78c8"/></to>
    </wire>
    <wire loc="71:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x2ae5030c78c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae5035f5710"/></to>
    </wire>
    <wire loc="137:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA0" scoped="" ref="0x2ae502fef7d0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2ae50307d1e8"/></to>
    </wire>
    <wire loc="66:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x2ae50307d1e8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae5033eb520"/></to>
    </wire>
    <wire loc="148:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB2" scoped="" ref="0x2ae502fff7e0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2ae50308de18"/></to>
    </wire>
    <wire loc="68:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x2ae50308de18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae503455710"/></to>
    </wire>
    <wire loc="159:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC4" scoped="" ref="0x2ae50300f968"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2ae50309ba50"/></to>
    </wire>
    <wire loc="70:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x2ae50309ba50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae5034cb710"/></to>
    </wire>
    <wire loc="170:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD6" scoped="" ref="0x2ae503020c78"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2ae5030ad740"/></to>
    </wire>
    <wire loc="72:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x2ae5030ad740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae50352b710"/></to>
    </wire>
    <wire loc="193:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG2" scoped="" ref="0x2ae5030371a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae50311ac38"/></to>
    </wire>
    <wire loc="173:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE0" scoped="" ref="0x2ae50301d020"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2ae5030b7930"/></to>
    </wire>
    <wire loc="66:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x2ae5030b7930"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae50358a6a8"/></to>
    </wire>
    <wire loc="162:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC7" scoped="" ref="0x2ae50300ce00"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2ae5030a9e18"/></to>
    </wire>
    <wire loc="73:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x2ae5030a9e18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae5034c1710"/></to>
    </wire>
    <wire loc="140:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA3" scoped="" ref="0x2ae502ff9c78"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2ae50307a5b8"/></to>
    </wire>
    <wire loc="69:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x2ae50307a5b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae5033e2710"/></to>
    </wire>
    <wire loc="151:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB5" scoped="" ref="0x2ae50300ae00"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2ae5030892a8"/></to>
    </wire>
    <wire loc="71:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x2ae5030892a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ae50344c710"/></to>
    </wire>
    <wire loc="54:/usr/src/tinyos/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x2ae502edd728"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2ae502f98b08"/></to>
    </wire>
    <wire loc="55:/usr/src/tinyos/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x2ae502f95020"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x2ae502ee6dc8"/></to>
    </wire>
    <wire loc="58:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x2ae502fb97b8"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x2ae50329d268"/></to>
    </wire>
    <wire loc="53:/usr/src/tinyos/tos/system/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x2ae5031dd2d8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2ae5031be020"/></to>
    </wire>
    <wire loc="54:/usr/src/tinyos/tos/system/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x2ae5031bdce8"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x2ae5031bfe10"/></to>
    </wire>
    <wire loc="56:/usr/src/tinyos/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x2ae5031bfe10"/></from>
      <to><interface-ref name="PortA2" scoped="" ref="0x2ae502ffaaf0"/></to>
    </wire>
    <wire loc="55:/usr/src/tinyos/tos/system/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x2ae5031bce70"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x2ae5031df020"/></to>
    </wire>
    <wire loc="57:/usr/src/tinyos/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x2ae5031df020"/></from>
      <to><interface-ref name="PortA1" scoped="" ref="0x2ae502ffb968"/></to>
    </wire>
    <wire loc="56:/usr/src/tinyos/tos/system/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x2ae5031ba020"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x2ae5031de1b0"/></to>
    </wire>
    <wire loc="58:/usr/src/tinyos/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x2ae5031de1b0"/></from>
      <to><interface-ref name="PortA0" scoped="" ref="0x2ae502fef7d0"/></to>
    </wire>
    <wire loc="54:/usr/src/tinyos/tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x2ae5031e36a0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x2ae5031f1db8"/></to>
    </wire>
    <wire loc="61:/usr/src/tinyos/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x2ae5031f1db8"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2ae5033745e0"/></to>
    </wire>
    <wire loc="59:/usr/src/tinyos/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x2ae5031f10c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2ae5031ff8a8"/></to>
    </wire>
    <wire loc="65:/usr/src/tinyos/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x2ae5031fd298"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x2ae503381128"/></to>
    </wire>
    <wire loc="35:/usr/src/tinyos/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="Init" scoped="" ref="0x2ae5031ff8a8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2ae5033101f0"/></to>
    </wire>
    <wire loc="62:/usr/src/tinyos/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x2ae50338a858"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2ae503334ab0"/></to>
    </wire>
    <wire loc="63:/usr/src/tinyos/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x2ae50332fc70"/></from>
      <to><interface-ref name="AlarmMilli32" scoped="" ref="0x2ae50320e1c8"/></to>
    </wire>
    <wire loc="36:/usr/src/tinyos/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="AlarmMilli32" scoped="" ref="0x2ae50320e1c8"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x2ae503310998"/></to>
    </wire>
    <wire loc="66:/usr/src/tinyos/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x2ae503394330"/></from>
      <to><interface-ref name="CounterMilli32" scoped="" ref="0x2ae5032053b8"/></to>
    </wire>
    <wire loc="37:/usr/src/tinyos/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="CounterMilli32" scoped="" ref="0x2ae5032053b8"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x2ae50330da90"/></to>
    </wire>
    <wire loc="37:/usr/src/tinyos/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x2ae50330da90"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x2ae5036b4608"/></to>
    </wire>
    <wire loc="35:/usr/src/tinyos/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x2ae5033101f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2ae5036b9c70"/></to>
    </wire>
    <wire loc="36:/usr/src/tinyos/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x2ae503310998"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x2ae5036b8478"/></to>
    </wire>
    <wire loc="39:/usr/src/tinyos/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x2ae5036e7710"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2ae503289de0"/></to>
    </wire>
    <wire loc="60:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x2ae503289de0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2ae5032a70f8"/></to>
    </wire>
    <wire loc="40:/usr/src/tinyos/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x2ae5036e2708"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x2ae503299020"/></to>
    </wire>
    <wire loc="61:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x2ae503299020"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x2ae5032a2160"/></to>
    </wire>
    <wire loc="41:/usr/src/tinyos/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x2ae5036e16c0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x2ae503297020"/></to>
    </wire>
    <wire loc="62:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x2ae503297020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x2ae5032a1190"/></to>
    </wire>
    <wire loc="42:/usr/src/tinyos/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="TimerAsync" scoped="" ref="0x2ae5036dd8c0"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x2ae503294228"/></to>
    </wire>
    <wire loc="63:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="TimerAsync" scoped="" ref="0x2ae503294228"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x2ae50329d968"/></to>
    </wire>
    <wire loc="74:/usr/src/tinyos/tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x2ae50332ccf0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2ae502edd728"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:/usr/src/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x2ae503385930"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2ae502edd728"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="56:/usr/src/tinyos/tos/system/MainC.nc">
      <documentation loc="1:/usr/src/tinyos/tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="44:/usr/src/tinyos/tos/platforms/mica/PlatformC.nc">
      <documentation loc="1:/usr/src/tinyos/tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="42:/usr/src/tinyos/tos/platforms/mica/PlatformP.nc" safe="">
      <documentation loc="1:/usr/src/tinyos/tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MotePlatformC" loc="38:/usr/src/tinyos/tos/platforms/micaz/MotePlatformC.nc">
      <documentation loc="33:/usr/src/tinyos/tos/platforms/micaz/MotePlatformC.nc">
        <short>&#10; The porttion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The porttion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MotePlatformP" loc="41:/usr/src/tinyos/tos/platforms/micaz/MotePlatformP.nc" safe="">
      <documentation loc="35:/usr/src/tinyos/tos/platforms/micaz/MotePlatformP.nc">
        <short>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.</short>
        <long>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC" loc="42:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <documentation loc="36:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
        <short>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.</short>
        <long>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA" loc="40(HplAtm128GeneralIOC.PortA):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:59">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:58">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:57">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit0" loc="41(HplAtm128GeneralIOC.PortA.Bit0):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit1" loc="41(HplAtm128GeneralIOC.PortA.Bit1):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit2" loc="41(HplAtm128GeneralIOC.PortA.Bit2):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit3" loc="41(HplAtm128GeneralIOC.PortA.Bit3):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit4" loc="41(HplAtm128GeneralIOC.PortA.Bit4):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit5" loc="41(HplAtm128GeneralIOC.PortA.Bit5):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit6" loc="41(HplAtm128GeneralIOC.PortA.Bit6):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit7" loc="41(HplAtm128GeneralIOC.PortA.Bit7):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB" loc="40(HplAtm128GeneralIOC.PortB):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:56">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit0" loc="41(HplAtm128GeneralIOC.PortB.Bit0):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit1" loc="41(HplAtm128GeneralIOC.PortB.Bit1):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit2" loc="41(HplAtm128GeneralIOC.PortB.Bit2):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit3" loc="41(HplAtm128GeneralIOC.PortB.Bit3):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit4" loc="41(HplAtm128GeneralIOC.PortB.Bit4):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit5" loc="41(HplAtm128GeneralIOC.PortB.Bit5):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit6" loc="41(HplAtm128GeneralIOC.PortB.Bit6):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit7" loc="41(HplAtm128GeneralIOC.PortB.Bit7):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC" loc="40(HplAtm128GeneralIOC.PortC):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:53">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit0" loc="41(HplAtm128GeneralIOC.PortC.Bit0):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit1" loc="41(HplAtm128GeneralIOC.PortC.Bit1):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit2" loc="41(HplAtm128GeneralIOC.PortC.Bit2):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit3" loc="41(HplAtm128GeneralIOC.PortC.Bit3):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit4" loc="41(HplAtm128GeneralIOC.PortC.Bit4):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit5" loc="41(HplAtm128GeneralIOC.PortC.Bit5):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit6" loc="41(HplAtm128GeneralIOC.PortC.Bit6):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit7" loc="41(HplAtm128GeneralIOC.PortC.Bit7):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD" loc="40(HplAtm128GeneralIOC.PortD):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit0" loc="41(HplAtm128GeneralIOC.PortD.Bit0):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit1" loc="41(HplAtm128GeneralIOC.PortD.Bit1):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit2" loc="41(HplAtm128GeneralIOC.PortD.Bit2):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit3" loc="41(HplAtm128GeneralIOC.PortD.Bit3):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit4" loc="41(HplAtm128GeneralIOC.PortD.Bit4):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit5" loc="41(HplAtm128GeneralIOC.PortD.Bit5):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit6" loc="41(HplAtm128GeneralIOC.PortD.Bit6):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit7" loc="41(HplAtm128GeneralIOC.PortD.Bit7):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE" loc="40(HplAtm128GeneralIOC.PortE):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:35">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit0" loc="41(HplAtm128GeneralIOC.PortE.Bit0):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit1" loc="41(HplAtm128GeneralIOC.PortE.Bit1):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit2" loc="41(HplAtm128GeneralIOC.PortE.Bit2):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit3" loc="41(HplAtm128GeneralIOC.PortE.Bit3):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit4" loc="41(HplAtm128GeneralIOC.PortE.Bit4):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit5" loc="41(HplAtm128GeneralIOC.PortE.Bit5):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit6" loc="41(HplAtm128GeneralIOC.PortE.Bit6):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit7" loc="41(HplAtm128GeneralIOC.PortE.Bit7):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF" loc="40(HplAtm128GeneralIOC.PortF):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit0" loc="41(HplAtm128GeneralIOC.PortF.Bit0):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit1" loc="41(HplAtm128GeneralIOC.PortF.Bit1):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit2" loc="41(HplAtm128GeneralIOC.PortF.Bit2):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit3" loc="41(HplAtm128GeneralIOC.PortF.Bit3):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit4" loc="41(HplAtm128GeneralIOC.PortF.Bit4):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit5" loc="41(HplAtm128GeneralIOC.PortF.Bit5):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit6" loc="41(HplAtm128GeneralIOC.PortF.Bit6):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit7" loc="41(HplAtm128GeneralIOC.PortF.Bit7):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F0" loc="42(HplAtm128GeneralIOC.F0):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F1" loc="42(HplAtm128GeneralIOC.F1):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F2" loc="42(HplAtm128GeneralIOC.F2):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F3" loc="42(HplAtm128GeneralIOC.F3):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F4" loc="42(HplAtm128GeneralIOC.F4):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F5" loc="42(HplAtm128GeneralIOC.F5):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F6" loc="42(HplAtm128GeneralIOC.F6):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F7" loc="42(HplAtm128GeneralIOC.F7):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G0" loc="42(HplAtm128GeneralIOC.G0):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G1" loc="42(HplAtm128GeneralIOC.G1):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G2" loc="42(HplAtm128GeneralIOC.G2):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G3" loc="42(HplAtm128GeneralIOC.G3):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G4" loc="42(HplAtm128GeneralIOC.G4):/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MeasureClockC" loc="22:/usr/src/tinyos/tos/platforms/mica/MeasureClockC.nc" safe="">
      <documentation loc="14:/usr/src/tinyos/tos/platforms/mica/MeasureClockC.nc">
        <short>&#10; Measure cpu clock frequency at boot time.</short>
        <long>&#10; Measure cpu clock frequency at boot time. Provides an Atm128Calibrate&#10; interface so that other components can adjust their calibration as&#10; needed.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:/usr/src/tinyos/tos/system/RealMainP.nc" safe="">
      <documentation loc="49:/usr/src/tinyos/tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:/usr/src/tinyos/tos/system/TinySchedulerC.nc">
      <documentation loc="34:/usr/src/tinyos/tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:/usr/src/tinyos/tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="48:/usr/src/tinyos/tos/chips/atm128/McuSleepC.nc" safe="">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128. Power state calculation code copied from Rob&#10; Szewczyk's 1.x code in HPLPowerManagementM.nc.&#10;&#10; &#60;pre>&#10;  $Id: McuSleepC.nc,v 1.11 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Robert Szewczyk&#10; @date   October 26, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="BlinkC" loc="50:BlinkC.nc" safe="">
      <documentation loc="43:BlinkC.nc">
        <short>&#10; Implementation for Blink application.</short>
        <long>&#10; Implementation for Blink application.  Toggle the red LED when a&#10; Timer fires.&#10;*</long>
      </documentation>
      <module/>
    </component>
    <component qname="LedsC" loc="45:/usr/src/tinyos/tos/system/LedsC.nc">
      <documentation loc="34:/usr/src/tinyos/tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="44:/usr/src/tinyos/tos/system/LedsP.nc" safe="">
      <documentation loc="35:/usr/src/tinyos/tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="42:/usr/src/tinyos/tos/platforms/mica/PlatformLedsC.nc">
      <documentation loc="1:/usr/src/tinyos/tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="BlinkAppC.Timer0" loc="44(BlinkAppC.Timer0):/usr/src/tinyos/tos/system/TimerMilliC.nc">
      <documentation loc="33:/usr/src/tinyos/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:/usr/src/tinyos/tos/system/TimerMilliP.nc">
      <documentation loc="34:/usr/src/tinyos/tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="44:/usr/src/tinyos/tos/platforms/mica/HilTimerMilliC.nc">
      <documentation loc="34:/usr/src/tinyos/tos/platforms/mica/HilTimerMilliC.nc">
        <short>&#10; Millisecond timer for the mica family (see TEP102).</short>
        <long>&#10; Millisecond timer for the mica family (see TEP102). The &#34;millisecond&#34;&#10; timer system is built on hardware timer 0, running at 1024Hz.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP" loc="25:/usr/src/tinyos/tos/platforms/mica/AlarmCounterMilliP.nc">
      <documentation loc="11:/usr/src/tinyos/tos/platforms/mica/AlarmCounterMilliP.nc">
        <short>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.</short>
        <long>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.  This component does not follow the TEP102 HAL guidelines as&#10; there is only one compare register for timer 0, which is used to&#10; implement HilTimerMilliC. Hence it isn't useful to expose an&#10; AlarmMilliC or CounterMillIC component.&#10; &#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC" loc="23(AlarmCounterMilliP.Atm128AlarmAsyncC):/usr/src/tinyos/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <documentation loc="11:/usr/src/tinyos/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmAsyncC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ae502f5b608"/>
            <typename><typedef-ref name="TMilli" ref="0x2ae502f5b960"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP" loc="23(AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP):/usr/src/tinyos/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <documentation loc="11:/usr/src/tinyos/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmAsyncP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x2ae5032123b0"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128Timer0AsyncC" loc="43:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <documentation loc="33:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
        <short>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..</short>
        <long>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..&#10;&#10; @author Philip Levis&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer0AsyncP" loc="46:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc" safe="">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
        <short>&#10; HPL interface to Atmega128 timer 0 in ASYNC mode.</short>
        <long>&#10; HPL interface to Atmega128 timer 0 in ASYNC mode. This is a specialised&#10; HPL component that assumes that timer 0 is used in ASYNC mode and&#10; includes some workarounds for some of the weirdnesses (delayed overflow&#10; interrupt) of that mode.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):/usr/src/tinyos/tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:/usr/src/tinyos/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ae502f5b608"/>
            <typename><typedef-ref name="TMilli" ref="0x2ae502f5b960"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):/usr/src/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:/usr/src/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ae502f5b608"/>
            <typename><typedef-ref name="TMilli" ref="0x2ae502f5b960"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):/usr/src/tinyos/tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:/usr/src/tinyos/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ae502f5b608"/>
            <typename><typedef-ref name="TMilli" ref="0x2ae502f5b960"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BlinkAppC.Timer1" loc="44(BlinkAppC.Timer1):/usr/src/tinyos/tos/system/TimerMilliC.nc">
      <documentation loc="33:/usr/src/tinyos/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="BlinkAppC.Timer2" loc="44(BlinkAppC.Timer2):/usr/src/tinyos/tos/system/TimerMilliC.nc">
      <documentation loc="33:/usr/src/tinyos/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPortP" loc="40:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc" abstract="">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x2ae503031748" loc="40:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x2ae503031a90" loc="40:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x2ae503031dd8" loc="40:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPinP" loc="41:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc" abstract="" safe="">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x2ae503041020" loc="41:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x2ae503041388" loc="42:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x2ae5030416f0" loc="43:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x2ae503041a20" loc="44:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOSlowPinP" loc="42:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc" abstract="" safe="">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x2ae5030ce020" loc="42:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x2ae5030ce388" loc="43:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x2ae5030ce6f0" loc="44:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x2ae5030cea20" loc="45:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:/usr/src/tinyos/tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:/usr/src/tinyos/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128AlarmAsyncC" loc="23:/usr/src/tinyos/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc" abstract="">
      <documentation loc="11:/usr/src/tinyos/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x2ae5032123b0" loc="23:/usr/src/tinyos/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x2ae5032123b0"/></type-var>
        </typedef>
        <constant name="divider" ref="0x2ae5032126a0" loc="23:/usr/src/tinyos/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128AlarmAsyncP" loc="23:/usr/src/tinyos/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc" abstract="" safe="">
      <documentation loc="11:/usr/src/tinyos/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x2ae50321f978" loc="23:/usr/src/tinyos/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
          <component-ref qname="Atm128AlarmAsyncP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x2ae50321f978"/></type-var>
        </typedef>
        <constant name="divider" ref="0x2ae50321fc68" loc="23:/usr/src/tinyos/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
          <component-ref qname="Atm128AlarmAsyncP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:/usr/src/tinyos/tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:/usr/src/tinyos/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2ae5031fbc58" loc="46:/usr/src/tinyos/tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2ae5031fbc58"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:/usr/src/tinyos/tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:/usr/src/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2ae503345cc8" loc="46:/usr/src/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2ae503345cc8"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x2ae503342020" loc="46:/usr/src/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:/usr/src/tinyos/tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:/usr/src/tinyos/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2ae5033839f0" loc="46:/usr/src/tinyos/tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2ae5033839f0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0x2ae502fd80e0" loc="58:/usr/src/tinyos/tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x2ae502fd80e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ae502fd8430"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x2ae502fdab68" loc="57:/usr/src/tinyos/tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x2ae502fdab68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x2ae502fd9020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x2ae502fe1cf0" loc="52:/usr/src/tinyos/tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x2ae502fe1cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ae502fe00a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2ae502fd4080" loc="46:/usr/src/tinyos/tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2ae502fd4080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ae502fd43d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x2ae502fe1020" loc="50:/usr/src/tinyos/tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x2ae502fe1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x2ae502fe1370"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x2ae502fe14f8"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x2ae502fe1680"/>
        <function-ref name="actualMicro" scoped="" ref="0x2ae502fe1808"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x2ae502fe1990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x2ae502fe76c0" loc="45:/usr/src/tinyos/tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MoteInit" scoped="" ref="0x2ae502fe76c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ae502fe7a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2ae502fe7020" loc="44:/usr/src/tinyos/tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2ae502fe7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ae502fe7370"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MeasureClock" ref="0x2ae502fe7d88" loc="46:/usr/src/tinyos/tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MeasureClock" scoped="" ref="0x2ae502fe7d88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ae502fe6170"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x2ae502fdbbe8" loc="41:/usr/src/tinyos/tos/platforms/micaz/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x2ae502fdbbe8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ae502fe2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x2ae502fdb558" loc="40:/usr/src/tinyos/tos/platforms/micaz/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x2ae502fdb558"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ae502fdb8a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x2ae502feb4f8" loc="45:/usr/src/tinyos/tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x2ae502feb4f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ae502feb848"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialIdPin" ref="0x2ae502ff3388" loc="44:/usr/src/tinyos/tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialIdPin" scoped="" ref="0x2ae502ff3388"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae502ff36d8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae502ff3860"/>
        <function-ref name="toggle" scoped="" ref="0x2ae502ff39e8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae502ff3b70"/>
        <function-ref name="get" scoped="" ref="0x2ae502ff3cf8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae502ff3e80"/>
        <function-ref name="set" scoped="" ref="0x2ae502feb030"/>
        <function-ref name="clr" scoped="" ref="0x2ae502feb1b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x2ae502fed020" loc="43:/usr/src/tinyos/tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x2ae502fed020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ae502fed370"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG0" ref="0x2ae50302a968" loc="100:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG0" scoped="" ref="0x2ae50302a968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030290f0"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503029278"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503029400"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503029588"/>
        <function-ref name="get" scoped="" ref="0x2ae503029710"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503029898"/>
        <function-ref name="set" scoped="" ref="0x2ae503029a20"/>
        <function-ref name="clr" scoped="" ref="0x2ae503029ba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD1" ref="0x2ae5030174d0" loc="74:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD1" scoped="" ref="0x2ae5030174d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503017820"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030179a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503017b30"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503017cb8"/>
        <function-ref name="get" scoped="" ref="0x2ae503017e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503016020"/>
        <function-ref name="set" scoped="" ref="0x2ae5030161a8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503016330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE3" ref="0x2ae50301a4d0" loc="85:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE3" scoped="" ref="0x2ae50301a4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50301a820"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50301a9a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50301ab30"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50301acb8"/>
        <function-ref name="get" scoped="" ref="0x2ae50301ae40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503028020"/>
        <function-ref name="set" scoped="" ref="0x2ae5030281a8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503028330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF3" ref="0x2ae50302f1a0" loc="94:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF3" scoped="" ref="0x2ae50302f1a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50302f4f0"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50302f678"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50302f800"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50302f988"/>
        <function-ref name="get" scoped="" ref="0x2ae50302fb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50302fc98"/>
        <function-ref name="set" scoped="" ref="0x2ae50302fe20"/>
        <function-ref name="clr" scoped="" ref="0x2ae50302e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA6" ref="0x2ae5030031a0" loc="52:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA6" scoped="" ref="0x2ae5030031a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030034f0"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503003678"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503003800"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503003988"/>
        <function-ref name="get" scoped="" ref="0x2ae503003b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503003c98"/>
        <function-ref name="set" scoped="" ref="0x2ae503003e20"/>
        <function-ref name="clr" scoped="" ref="0x2ae503002020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF1" ref="0x2ae503023e00" loc="92:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF1" scoped="" ref="0x2ae503023e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030211a8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503021330"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030214b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503021640"/>
        <function-ref name="get" scoped="" ref="0x2ae5030217c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503021950"/>
        <function-ref name="set" scoped="" ref="0x2ae503021ad8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503021c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB0" ref="0x2ae5030014d0" loc="55:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB0" scoped="" ref="0x2ae5030014d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503001820"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030019a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503001b30"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503001cb8"/>
        <function-ref name="get" scoped="" ref="0x2ae503001e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503000020"/>
        <function-ref name="set" scoped="" ref="0x2ae5030001a8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503000330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC2" ref="0x2ae503012658" loc="66:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC2" scoped="" ref="0x2ae503012658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030129a8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503012b30"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503012cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503012e40"/>
        <function-ref name="get" scoped="" ref="0x2ae503010020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030101a8"/>
        <function-ref name="set" scoped="" ref="0x2ae503010330"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030104b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD4" ref="0x2ae503014968" loc="77:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD4" scoped="" ref="0x2ae503014968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503014cb8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503014e40"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503013020"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030131a8"/>
        <function-ref name="get" scoped="" ref="0x2ae503013330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030134b8"/>
        <function-ref name="set" scoped="" ref="0x2ae503013640"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030137c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE6" ref="0x2ae503026968" loc="88:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE6" scoped="" ref="0x2ae503026968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503026cb8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503026e40"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503025020"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030251a8"/>
        <function-ref name="get" scoped="" ref="0x2ae503025330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030254b8"/>
        <function-ref name="set" scoped="" ref="0x2ae503025640"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030257c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA1" ref="0x2ae502ffb968" loc="47:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA1" scoped="" ref="0x2ae502ffb968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae502ffbcb8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae502ffbe40"/>
        <function-ref name="toggle" scoped="" ref="0x2ae502ffa020"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae502ffa1a8"/>
        <function-ref name="get" scoped="" ref="0x2ae502ffa330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae502ffa4b8"/>
        <function-ref name="set" scoped="" ref="0x2ae502ffa640"/>
        <function-ref name="clr" scoped="" ref="0x2ae502ffa7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB3" ref="0x2ae502ffe968" loc="58:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB3" scoped="" ref="0x2ae502ffe968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae502ffecb8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae502ffee40"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50300b020"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50300b1a8"/>
        <function-ref name="get" scoped="" ref="0x2ae50300b330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50300b4b8"/>
        <function-ref name="set" scoped="" ref="0x2ae50300b640"/>
        <function-ref name="clr" scoped="" ref="0x2ae50300b7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC5" ref="0x2ae50300eaf0" loc="69:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC5" scoped="" ref="0x2ae50300eaf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50300ee40"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50300d020"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50300d1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50300d330"/>
        <function-ref name="get" scoped="" ref="0x2ae50300d4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50300d640"/>
        <function-ref name="set" scoped="" ref="0x2ae50300d7c8"/>
        <function-ref name="clr" scoped="" ref="0x2ae50300d950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD7" ref="0x2ae50301fe00" loc="80:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD7" scoped="" ref="0x2ae50301fe00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50301e1a8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50301e330"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50301e4b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50301e640"/>
        <function-ref name="get" scoped="" ref="0x2ae50301e7c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50301e950"/>
        <function-ref name="set" scoped="" ref="0x2ae50301ead8"/>
        <function-ref name="clr" scoped="" ref="0x2ae50301ec60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF6" ref="0x2ae50302c658" loc="97:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF6" scoped="" ref="0x2ae50302c658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50302c9a8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50302cb30"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50302ccb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50302ce40"/>
        <function-ref name="get" scoped="" ref="0x2ae50302b020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50302b1a8"/>
        <function-ref name="set" scoped="" ref="0x2ae50302b330"/>
        <function-ref name="clr" scoped="" ref="0x2ae50302b4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG3" ref="0x2ae503036348" loc="103:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG3" scoped="" ref="0x2ae503036348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503036698"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503036820"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030369a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503036b30"/>
        <function-ref name="get" scoped="" ref="0x2ae503036cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503036e40"/>
        <function-ref name="set" scoped="" ref="0x2ae503035020"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030351a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE1" ref="0x2ae50301c1a0" loc="83:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE1" scoped="" ref="0x2ae50301c1a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50301c4f0"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50301c678"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50301c800"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50301c988"/>
        <function-ref name="get" scoped="" ref="0x2ae50301cb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50301cc98"/>
        <function-ref name="set" scoped="" ref="0x2ae50301ce20"/>
        <function-ref name="clr" scoped="" ref="0x2ae50301b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA4" ref="0x2ae502ff8e00" loc="50:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA4" scoped="" ref="0x2ae502ff8e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae502ff71a8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae502ff7330"/>
        <function-ref name="toggle" scoped="" ref="0x2ae502ff74b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae502ff7640"/>
        <function-ref name="get" scoped="" ref="0x2ae502ff77c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae502ff7950"/>
        <function-ref name="set" scoped="" ref="0x2ae502ff7ad8"/>
        <function-ref name="clr" scoped="" ref="0x2ae502ff7c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB6" ref="0x2ae503008020" loc="61:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB6" scoped="" ref="0x2ae503008020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503008370"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030084f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503008680"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503008808"/>
        <function-ref name="get" scoped="" ref="0x2ae503008990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503008b18"/>
        <function-ref name="set" scoped="" ref="0x2ae503008ca0"/>
        <function-ref name="clr" scoped="" ref="0x2ae503008e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG1" ref="0x2ae503038020" loc="101:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG1" scoped="" ref="0x2ae503038020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503038370"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030384f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503038680"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503038808"/>
        <function-ref name="get" scoped="" ref="0x2ae503038990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503038b18"/>
        <function-ref name="set" scoped="" ref="0x2ae503038ca0"/>
        <function-ref name="clr" scoped="" ref="0x2ae503038e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC0" ref="0x2ae503006348" loc="64:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC0" scoped="" ref="0x2ae503006348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503006698"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503006820"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030069a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503006b30"/>
        <function-ref name="get" scoped="" ref="0x2ae503006cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503006e40"/>
        <function-ref name="set" scoped="" ref="0x2ae503005020"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030051a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD2" ref="0x2ae503016658" loc="75:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD2" scoped="" ref="0x2ae503016658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030169a8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503016b30"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503016cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503016e40"/>
        <function-ref name="get" scoped="" ref="0x2ae503015020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030151a8"/>
        <function-ref name="set" scoped="" ref="0x2ae503015330"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030154b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE4" ref="0x2ae503028658" loc="86:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE4" scoped="" ref="0x2ae503028658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030289a8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503028b30"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503028cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503028e40"/>
        <function-ref name="get" scoped="" ref="0x2ae503027020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030271a8"/>
        <function-ref name="set" scoped="" ref="0x2ae503027330"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030274b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF4" ref="0x2ae50302e348" loc="95:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF4" scoped="" ref="0x2ae50302e348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50302e698"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50302e820"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50302e9a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50302eb30"/>
        <function-ref name="get" scoped="" ref="0x2ae50302ecb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50302ee40"/>
        <function-ref name="set" scoped="" ref="0x2ae50302d020"/>
        <function-ref name="clr" scoped="" ref="0x2ae50302d1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA7" ref="0x2ae503002348" loc="53:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA7" scoped="" ref="0x2ae503002348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503002698"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503002820"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030029a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503002b30"/>
        <function-ref name="get" scoped="" ref="0x2ae503002cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503002e40"/>
        <function-ref name="set" scoped="" ref="0x2ae503001020"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030011a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB1" ref="0x2ae503000658" loc="56:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB1" scoped="" ref="0x2ae503000658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030009a8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503000b30"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503000cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503000e40"/>
        <function-ref name="get" scoped="" ref="0x2ae502fff020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae502fff1a8"/>
        <function-ref name="set" scoped="" ref="0x2ae502fff330"/>
        <function-ref name="clr" scoped="" ref="0x2ae502fff4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC3" ref="0x2ae5030107e0" loc="67:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC3" scoped="" ref="0x2ae5030107e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503010b30"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503010cb8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503010e40"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50300f020"/>
        <function-ref name="get" scoped="" ref="0x2ae50300f1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50300f330"/>
        <function-ref name="set" scoped="" ref="0x2ae50300f4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae50300f640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD5" ref="0x2ae503013af0" loc="78:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD5" scoped="" ref="0x2ae503013af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503013e40"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503020020"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030201a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503020330"/>
        <function-ref name="get" scoped="" ref="0x2ae5030204b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503020640"/>
        <function-ref name="set" scoped="" ref="0x2ae5030207c8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503020950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE7" ref="0x2ae503025af0" loc="89:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE7" scoped="" ref="0x2ae503025af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503025e40"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503024020"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030241a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503024330"/>
        <function-ref name="get" scoped="" ref="0x2ae5030244b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503024640"/>
        <function-ref name="set" scoped="" ref="0x2ae5030247c8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503024950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA2" ref="0x2ae502ffaaf0" loc="48:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA2" scoped="" ref="0x2ae502ffaaf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae502ffae40"/>
        <function-ref name="isInput" scoped="" ref="0x2ae502ff9020"/>
        <function-ref name="toggle" scoped="" ref="0x2ae502ff91a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae502ff9330"/>
        <function-ref name="get" scoped="" ref="0x2ae502ff94b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae502ff9640"/>
        <function-ref name="set" scoped="" ref="0x2ae502ff97c8"/>
        <function-ref name="clr" scoped="" ref="0x2ae502ff9950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB4" ref="0x2ae50300baf0" loc="59:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB4" scoped="" ref="0x2ae50300baf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50300a020"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50300a1a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50300a330"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50300a4b8"/>
        <function-ref name="get" scoped="" ref="0x2ae50300a640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50300a7c8"/>
        <function-ref name="set" scoped="" ref="0x2ae50300a950"/>
        <function-ref name="clr" scoped="" ref="0x2ae50300aad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC6" ref="0x2ae50300dc78" loc="70:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC6" scoped="" ref="0x2ae50300dc78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50300c020"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50300c1a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50300c330"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50300c4b8"/>
        <function-ref name="get" scoped="" ref="0x2ae50300c640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50300c7c8"/>
        <function-ref name="set" scoped="" ref="0x2ae50300c950"/>
        <function-ref name="clr" scoped="" ref="0x2ae50300cad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF7" ref="0x2ae50302b7e0" loc="98:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF7" scoped="" ref="0x2ae50302b7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50302bb30"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50302bcb8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50302be40"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50302a020"/>
        <function-ref name="get" scoped="" ref="0x2ae50302a1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50302a330"/>
        <function-ref name="set" scoped="" ref="0x2ae50302a4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae50302a640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD0" ref="0x2ae503018020" loc="73:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD0" scoped="" ref="0x2ae503018020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503018570"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030186f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503018880"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503018a08"/>
        <function-ref name="get" scoped="" ref="0x2ae503018b90"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503018d18"/>
        <function-ref name="set" scoped="" ref="0x2ae503017020"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030171a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE2" ref="0x2ae50301b348" loc="84:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE2" scoped="" ref="0x2ae50301b348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50301b698"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50301b820"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50301b9a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50301bb30"/>
        <function-ref name="get" scoped="" ref="0x2ae50301bcb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50301be40"/>
        <function-ref name="set" scoped="" ref="0x2ae50301a020"/>
        <function-ref name="clr" scoped="" ref="0x2ae50301a1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF2" ref="0x2ae503030020" loc="93:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF2" scoped="" ref="0x2ae503030020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503030370"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030304f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503030680"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503030808"/>
        <function-ref name="get" scoped="" ref="0x2ae503030990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503030b18"/>
        <function-ref name="set" scoped="" ref="0x2ae503030ca0"/>
        <function-ref name="clr" scoped="" ref="0x2ae503030e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG4" ref="0x2ae5030354d0" loc="104:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG4" scoped="" ref="0x2ae5030354d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503035820"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030359a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503035b30"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503035cb8"/>
        <function-ref name="get" scoped="" ref="0x2ae503035e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503034020"/>
        <function-ref name="set" scoped="" ref="0x2ae5030341a8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503034330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA5" ref="0x2ae503004020" loc="51:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA5" scoped="" ref="0x2ae503004020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503004370"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030044f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503004680"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503004808"/>
        <function-ref name="get" scoped="" ref="0x2ae503004990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503004b18"/>
        <function-ref name="set" scoped="" ref="0x2ae503004ca0"/>
        <function-ref name="clr" scoped="" ref="0x2ae503004e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB7" ref="0x2ae5030071a0" loc="62:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB7" scoped="" ref="0x2ae5030071a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030074f0"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503007678"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503007800"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503007988"/>
        <function-ref name="get" scoped="" ref="0x2ae503007b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503007c98"/>
        <function-ref name="set" scoped="" ref="0x2ae503007e20"/>
        <function-ref name="clr" scoped="" ref="0x2ae503006020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF0" ref="0x2ae503024c78" loc="91:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF0" scoped="" ref="0x2ae503024c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503023020"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030231a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503023330"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030234b8"/>
        <function-ref name="get" scoped="" ref="0x2ae503023640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030237c8"/>
        <function-ref name="set" scoped="" ref="0x2ae503023950"/>
        <function-ref name="clr" scoped="" ref="0x2ae503023ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC1" ref="0x2ae5030054d0" loc="65:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC1" scoped="" ref="0x2ae5030054d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503005820"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030059a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503005b30"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503005cb8"/>
        <function-ref name="get" scoped="" ref="0x2ae503005e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503012020"/>
        <function-ref name="set" scoped="" ref="0x2ae5030121a8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503012330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD3" ref="0x2ae5030157e0" loc="76:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD3" scoped="" ref="0x2ae5030157e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503015b30"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503015cb8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503015e40"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503014020"/>
        <function-ref name="get" scoped="" ref="0x2ae5030141a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503014330"/>
        <function-ref name="set" scoped="" ref="0x2ae5030144b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503014640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE5" ref="0x2ae5030277e0" loc="87:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE5" scoped="" ref="0x2ae5030277e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503027b30"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503027cb8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503027e40"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503026020"/>
        <function-ref name="get" scoped="" ref="0x2ae5030261a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503026330"/>
        <function-ref name="set" scoped="" ref="0x2ae5030264b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503026640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF5" ref="0x2ae50302d4d0" loc="96:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF5" scoped="" ref="0x2ae50302d4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50302d820"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50302d9a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50302db30"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50302dcb8"/>
        <function-ref name="get" scoped="" ref="0x2ae50302de40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50302c020"/>
        <function-ref name="set" scoped="" ref="0x2ae50302c1a8"/>
        <function-ref name="clr" scoped="" ref="0x2ae50302c330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA0" ref="0x2ae502fef7d0" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA0" scoped="" ref="0x2ae502fef7d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae502fefb20"/>
        <function-ref name="isInput" scoped="" ref="0x2ae502fefca8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae502fefe30"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae502ffb020"/>
        <function-ref name="get" scoped="" ref="0x2ae502ffb1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae502ffb330"/>
        <function-ref name="set" scoped="" ref="0x2ae502ffb4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae502ffb640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB2" ref="0x2ae502fff7e0" loc="57:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB2" scoped="" ref="0x2ae502fff7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae502fffb30"/>
        <function-ref name="isInput" scoped="" ref="0x2ae502fffcb8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae502fffe40"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae502ffe020"/>
        <function-ref name="get" scoped="" ref="0x2ae502ffe1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae502ffe330"/>
        <function-ref name="set" scoped="" ref="0x2ae502ffe4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae502ffe640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC4" ref="0x2ae50300f968" loc="68:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC4" scoped="" ref="0x2ae50300f968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50300fcb8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50300fe40"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50300e020"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50300e1a8"/>
        <function-ref name="get" scoped="" ref="0x2ae50300e330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50300e4b8"/>
        <function-ref name="set" scoped="" ref="0x2ae50300e640"/>
        <function-ref name="clr" scoped="" ref="0x2ae50300e7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD6" ref="0x2ae503020c78" loc="79:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD6" scoped="" ref="0x2ae503020c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50301f020"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50301f1a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50301f330"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50301f4b8"/>
        <function-ref name="get" scoped="" ref="0x2ae50301f640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50301f7c8"/>
        <function-ref name="set" scoped="" ref="0x2ae50301f950"/>
        <function-ref name="clr" scoped="" ref="0x2ae50301fad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG2" ref="0x2ae5030371a0" loc="102:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG2" scoped="" ref="0x2ae5030371a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030374f0"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503037678"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503037800"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503037988"/>
        <function-ref name="get" scoped="" ref="0x2ae503037b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503037c98"/>
        <function-ref name="set" scoped="" ref="0x2ae503037e20"/>
        <function-ref name="clr" scoped="" ref="0x2ae503036020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE0" ref="0x2ae50301d020" loc="82:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE0" scoped="" ref="0x2ae50301d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50301d370"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50301d4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50301d680"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50301d808"/>
        <function-ref name="get" scoped="" ref="0x2ae50301d990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50301db18"/>
        <function-ref name="set" scoped="" ref="0x2ae50301dca0"/>
        <function-ref name="clr" scoped="" ref="0x2ae50301de28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC7" ref="0x2ae50300ce00" loc="71:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC7" scoped="" ref="0x2ae50300ce00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030191a8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503019330"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030194b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503019640"/>
        <function-ref name="get" scoped="" ref="0x2ae5030197c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503019950"/>
        <function-ref name="set" scoped="" ref="0x2ae503019ad8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503019c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA3" ref="0x2ae502ff9c78" loc="49:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA3" scoped="" ref="0x2ae502ff9c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae502ff8020"/>
        <function-ref name="isInput" scoped="" ref="0x2ae502ff81a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae502ff8330"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae502ff84b8"/>
        <function-ref name="get" scoped="" ref="0x2ae502ff8640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae502ff87c8"/>
        <function-ref name="set" scoped="" ref="0x2ae502ff8950"/>
        <function-ref name="clr" scoped="" ref="0x2ae502ff8ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB5" ref="0x2ae50300ae00" loc="60:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB5" scoped="" ref="0x2ae50300ae00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030091a8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503009330"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030094b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503009640"/>
        <function-ref name="get" scoped="" ref="0x2ae5030097c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503009950"/>
        <function-ref name="set" scoped="" ref="0x2ae503009ad8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503009c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2ae50307b430" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2ae50307b430"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50307b780"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50307b908"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50307ba90"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50307bc18"/>
        <function-ref name="get" scoped="" ref="0x2ae50307bda0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50307a020"/>
        <function-ref name="set" scoped="" ref="0x2ae50307a1a8"/>
        <function-ref name="clr" scoped="" ref="0x2ae50307a330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2ae5030888c8" loc="49:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2ae5030888c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503088c18"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503088da0"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503087020"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030871a8"/>
        <function-ref name="get" scoped="" ref="0x2ae503087330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030874b8"/>
        <function-ref name="set" scoped="" ref="0x2ae503087640"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030877c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2ae50307d1e8" loc="44:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2ae50307d1e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50307d538"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50307d6c0"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50307d848"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50307d9d0"/>
        <function-ref name="get" scoped="" ref="0x2ae50307db58"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50307dce0"/>
        <function-ref name="set" scoped="" ref="0x2ae50307de68"/>
        <function-ref name="clr" scoped="" ref="0x2ae50307c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2ae50307a5b8" loc="47:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2ae50307a5b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50307a908"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50307aa90"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50307ac18"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50307ada0"/>
        <function-ref name="get" scoped="" ref="0x2ae503079020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030791a8"/>
        <function-ref name="set" scoped="" ref="0x2ae503079330"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030794b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2ae503087a50" loc="50:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2ae503087a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503087da0"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503086020"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030861a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503086330"/>
        <function-ref name="get" scoped="" ref="0x2ae5030864b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503086640"/>
        <function-ref name="set" scoped="" ref="0x2ae5030867c8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503086950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2ae50307c2a8" loc="45:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2ae50307c2a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50307c5f8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50307c780"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50307c908"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50307ca90"/>
        <function-ref name="get" scoped="" ref="0x2ae50307cc18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50307cda0"/>
        <function-ref name="set" scoped="" ref="0x2ae50307b020"/>
        <function-ref name="clr" scoped="" ref="0x2ae50307b1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2ae503079740" loc="48:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2ae503079740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503079a90"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503079c18"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503079da0"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503088020"/>
        <function-ref name="get" scoped="" ref="0x2ae5030881a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503088330"/>
        <function-ref name="set" scoped="" ref="0x2ae5030884b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503088640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2ae503086bd8" loc="51:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2ae503086bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503085020"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030851a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503085330"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030854b8"/>
        <function-ref name="get" scoped="" ref="0x2ae503085640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030857c8"/>
        <function-ref name="set" scoped="" ref="0x2ae503085950"/>
        <function-ref name="clr" scoped="" ref="0x2ae503085ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae5033eb520" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae5033eb520"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5033eb870"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5033eb9f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5033ebb80"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5033ebd08"/>
        <function-ref name="get" scoped="" ref="0x2ae5033ea020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5033ea1a8"/>
        <function-ref name="set" scoped="" ref="0x2ae5033ea330"/>
        <function-ref name="clr" scoped="" ref="0x2ae5033ea4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae5033e86a8" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae5033e86a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5033e89f8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5033e8b80"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5033e8d08"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5033e7020"/>
        <function-ref name="get" scoped="" ref="0x2ae5033e71a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5033e7330"/>
        <function-ref name="set" scoped="" ref="0x2ae5033e74b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5033e7640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae5033e5710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae5033e5710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5033e5a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5033e5be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5033e5d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5033e4020"/>
        <function-ref name="get" scoped="" ref="0x2ae5033e41a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5033e4330"/>
        <function-ref name="set" scoped="" ref="0x2ae5033e44b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5033e4640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae5033e2710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae5033e2710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5033e2a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5033e2be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5033e2d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5033e1020"/>
        <function-ref name="get" scoped="" ref="0x2ae5033e11a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5033e1330"/>
        <function-ref name="set" scoped="" ref="0x2ae5033e14b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5033e1640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae5033fd710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae5033fd710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5033fda60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5033fdbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5033fdd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5033fb020"/>
        <function-ref name="get" scoped="" ref="0x2ae5033fb1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5033fb330"/>
        <function-ref name="set" scoped="" ref="0x2ae5033fb4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5033fb640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae5033f9710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae5033f9710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5033f9a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5033f9be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5033f9d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5033f8020"/>
        <function-ref name="get" scoped="" ref="0x2ae5033f81a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5033f8330"/>
        <function-ref name="set" scoped="" ref="0x2ae5033f84b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5033f8640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae5033f6710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae5033f6710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5033f6a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5033f6be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5033f6d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5033f5020"/>
        <function-ref name="get" scoped="" ref="0x2ae5033f51a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5033f5330"/>
        <function-ref name="set" scoped="" ref="0x2ae5033f54b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5033f5640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae5033f3710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae5033f3710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5033f3a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5033f3be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5033f3d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5033f2020"/>
        <function-ref name="get" scoped="" ref="0x2ae5033f21a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5033f2330"/>
        <function-ref name="set" scoped="" ref="0x2ae5033f24b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5033f2640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2ae50308de18" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2ae50308de18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50308c1a8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50308c330"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50308c4b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50308c640"/>
        <function-ref name="get" scoped="" ref="0x2ae50308c7c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50308c950"/>
        <function-ref name="set" scoped="" ref="0x2ae50308cad8"/>
        <function-ref name="clr" scoped="" ref="0x2ae50308cc60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2ae5030892a8" loc="49:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2ae5030892a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030895f8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503089780"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503089908"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503089a90"/>
        <function-ref name="get" scoped="" ref="0x2ae503089c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503089da0"/>
        <function-ref name="set" scoped="" ref="0x2ae503097020"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030971a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2ae50308fbd0" loc="44:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2ae50308fbd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50308e020"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50308e1a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50308e330"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50308e4b8"/>
        <function-ref name="get" scoped="" ref="0x2ae50308e640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50308e7c8"/>
        <function-ref name="set" scoped="" ref="0x2ae50308e950"/>
        <function-ref name="clr" scoped="" ref="0x2ae50308ead8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2ae50308b020" loc="47:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2ae50308b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50308b370"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50308b4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50308b680"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50308b808"/>
        <function-ref name="get" scoped="" ref="0x2ae50308b990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50308bb18"/>
        <function-ref name="set" scoped="" ref="0x2ae50308bca0"/>
        <function-ref name="clr" scoped="" ref="0x2ae50308be28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2ae503097430" loc="50:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2ae503097430"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503097780"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503097908"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503097a90"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503097c18"/>
        <function-ref name="get" scoped="" ref="0x2ae503097da0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503096020"/>
        <function-ref name="set" scoped="" ref="0x2ae5030961a8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503096330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2ae50308ed60" loc="45:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2ae50308ed60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50308d0d8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50308d260"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50308d3e8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50308d570"/>
        <function-ref name="get" scoped="" ref="0x2ae50308d6f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50308d880"/>
        <function-ref name="set" scoped="" ref="0x2ae50308da08"/>
        <function-ref name="clr" scoped="" ref="0x2ae50308db90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2ae50308a120" loc="48:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2ae50308a120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50308a470"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50308a5f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50308a780"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50308a908"/>
        <function-ref name="get" scoped="" ref="0x2ae50308aa90"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50308ac18"/>
        <function-ref name="set" scoped="" ref="0x2ae50308ada0"/>
        <function-ref name="clr" scoped="" ref="0x2ae503089020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2ae5030965b8" loc="51:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2ae5030965b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503096908"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503096a90"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503096c18"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503096da0"/>
        <function-ref name="get" scoped="" ref="0x2ae503095020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030951a8"/>
        <function-ref name="set" scoped="" ref="0x2ae503095330"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030954b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae50345b6a8" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae50345b6a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50345b9f8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50345bb80"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50345bd08"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50345a020"/>
        <function-ref name="get" scoped="" ref="0x2ae50345a1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50345a330"/>
        <function-ref name="set" scoped="" ref="0x2ae50345a4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae50345a640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae503458710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae503458710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503458a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503458be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503458d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503457020"/>
        <function-ref name="get" scoped="" ref="0x2ae5034571a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503457330"/>
        <function-ref name="set" scoped="" ref="0x2ae5034574b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503457640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae503455710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae503455710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503455a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503455be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503455d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503454020"/>
        <function-ref name="get" scoped="" ref="0x2ae5034541a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503454330"/>
        <function-ref name="set" scoped="" ref="0x2ae5034544b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503454640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae503452710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae503452710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503452a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503452be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503452d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503451020"/>
        <function-ref name="get" scoped="" ref="0x2ae5034511a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503451330"/>
        <function-ref name="set" scoped="" ref="0x2ae5034514b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503451640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae50344f710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae50344f710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50344fa60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50344fbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50344fd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50344e020"/>
        <function-ref name="get" scoped="" ref="0x2ae50344e1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50344e330"/>
        <function-ref name="set" scoped="" ref="0x2ae50344e4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae50344e640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae50344c710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae50344c710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50344ca60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50344cbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50344cd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50346a020"/>
        <function-ref name="get" scoped="" ref="0x2ae50346a1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50346a330"/>
        <function-ref name="set" scoped="" ref="0x2ae50346a4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae50346a640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae503468710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae503468710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503468a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503468be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503468d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503467020"/>
        <function-ref name="get" scoped="" ref="0x2ae5034671a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503467330"/>
        <function-ref name="set" scoped="" ref="0x2ae5034674b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503467640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae503465710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae503465710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503465a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503465be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503465d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503464020"/>
        <function-ref name="get" scoped="" ref="0x2ae5034641a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503464330"/>
        <function-ref name="set" scoped="" ref="0x2ae5034644b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503464640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2ae50309e740" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2ae50309e740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50309ea90"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50309ec18"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50309eda0"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50309c020"/>
        <function-ref name="get" scoped="" ref="0x2ae50309c1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50309c330"/>
        <function-ref name="set" scoped="" ref="0x2ae50309c4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae50309c640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2ae50309abd8" loc="49:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2ae50309abd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503099020"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030991a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503099330"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030994b8"/>
        <function-ref name="get" scoped="" ref="0x2ae503099640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030997c8"/>
        <function-ref name="set" scoped="" ref="0x2ae503099950"/>
        <function-ref name="clr" scoped="" ref="0x2ae503099ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2ae5030a0500" loc="44:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2ae5030a0500"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030a0850"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030a09d8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030a0b60"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030a0ce8"/>
        <function-ref name="get" scoped="" ref="0x2ae5030a0e70"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50309f020"/>
        <function-ref name="set" scoped="" ref="0x2ae50309f1a8"/>
        <function-ref name="clr" scoped="" ref="0x2ae50309f330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2ae50309c8c8" loc="47:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2ae50309c8c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50309cc18"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50309cda0"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50309b020"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50309b1a8"/>
        <function-ref name="get" scoped="" ref="0x2ae50309b330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50309b4b8"/>
        <function-ref name="set" scoped="" ref="0x2ae50309b640"/>
        <function-ref name="clr" scoped="" ref="0x2ae50309b7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2ae503099d60" loc="50:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2ae503099d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030a90d8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030a9260"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030a93e8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030a9570"/>
        <function-ref name="get" scoped="" ref="0x2ae5030a96f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030a9880"/>
        <function-ref name="set" scoped="" ref="0x2ae5030a9a08"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030a9b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2ae50309f5b8" loc="45:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2ae50309f5b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50309f908"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50309fa90"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50309fc18"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50309fda0"/>
        <function-ref name="get" scoped="" ref="0x2ae50309e020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50309e1a8"/>
        <function-ref name="set" scoped="" ref="0x2ae50309e330"/>
        <function-ref name="clr" scoped="" ref="0x2ae50309e4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2ae50309ba50" loc="48:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2ae50309ba50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50309bda0"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50309a020"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50309a1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50309a330"/>
        <function-ref name="get" scoped="" ref="0x2ae50309a4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50309a640"/>
        <function-ref name="set" scoped="" ref="0x2ae50309a7c8"/>
        <function-ref name="clr" scoped="" ref="0x2ae50309a950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2ae5030a9e18" loc="51:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2ae5030a9e18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030a81a8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030a8330"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030a84b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030a8640"/>
        <function-ref name="get" scoped="" ref="0x2ae5030a87c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030a8950"/>
        <function-ref name="set" scoped="" ref="0x2ae5030a8ad8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030a8c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae5034b56a8" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae5034b56a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5034b59f8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5034b5b80"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5034b5d08"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5034b4020"/>
        <function-ref name="get" scoped="" ref="0x2ae5034b41a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5034b4330"/>
        <function-ref name="set" scoped="" ref="0x2ae5034b44b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5034b4640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae5034b2710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae5034b2710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5034b2a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5034b2be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5034b2d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5034b1020"/>
        <function-ref name="get" scoped="" ref="0x2ae5034b11a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5034b1330"/>
        <function-ref name="set" scoped="" ref="0x2ae5034b14b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5034b1640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae5034af710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae5034af710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5034afa60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5034afbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5034afd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5034ae020"/>
        <function-ref name="get" scoped="" ref="0x2ae5034ae1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5034ae330"/>
        <function-ref name="set" scoped="" ref="0x2ae5034ae4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5034ae640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae5034ac710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae5034ac710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5034aca60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5034acbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5034acd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5034cd020"/>
        <function-ref name="get" scoped="" ref="0x2ae5034cd1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5034cd330"/>
        <function-ref name="set" scoped="" ref="0x2ae5034cd4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5034cd640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae5034cb710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae5034cb710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5034cba60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5034cbbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5034cbd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5034ca020"/>
        <function-ref name="get" scoped="" ref="0x2ae5034ca1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5034ca330"/>
        <function-ref name="set" scoped="" ref="0x2ae5034ca4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5034ca640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae5034c8710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae5034c8710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5034c8a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5034c8be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5034c8d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5034c6020"/>
        <function-ref name="get" scoped="" ref="0x2ae5034c61a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5034c6330"/>
        <function-ref name="set" scoped="" ref="0x2ae5034c64b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5034c6640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae5034c4710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae5034c4710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5034c4a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5034c4be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5034c4d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5034c3020"/>
        <function-ref name="get" scoped="" ref="0x2ae5034c31a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5034c3330"/>
        <function-ref name="set" scoped="" ref="0x2ae5034c34b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5034c3640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae5034c1710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae5034c1710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5034c1a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5034c1be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5034c1d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5034c0020"/>
        <function-ref name="get" scoped="" ref="0x2ae5034c01a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5034c0330"/>
        <function-ref name="set" scoped="" ref="0x2ae5034c04b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5034c0640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2ae5030b1120" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2ae5030b1120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030b1470"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030b15f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030b1780"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030b1908"/>
        <function-ref name="get" scoped="" ref="0x2ae5030b1a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030b1c18"/>
        <function-ref name="set" scoped="" ref="0x2ae5030b1da0"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030b0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2ae5030ae5b8" loc="49:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2ae5030ae5b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030ae908"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030aea90"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030aec18"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030aeda0"/>
        <function-ref name="get" scoped="" ref="0x2ae5030ad020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030ad1a8"/>
        <function-ref name="set" scoped="" ref="0x2ae5030ad330"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030ad4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2ae5030a2e40" loc="44:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2ae5030a2e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030a11c0"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030a1348"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030a14d0"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030a1658"/>
        <function-ref name="get" scoped="" ref="0x2ae5030a17e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030a1968"/>
        <function-ref name="set" scoped="" ref="0x2ae5030a1af0"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030a1c78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2ae5030b02a8" loc="47:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2ae5030b02a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030b05f8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030b0780"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030b0908"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030b0a90"/>
        <function-ref name="get" scoped="" ref="0x2ae5030b0c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030b0da0"/>
        <function-ref name="set" scoped="" ref="0x2ae5030af020"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030af1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2ae5030ad740" loc="50:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2ae5030ad740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030ada90"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030adc18"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030adda0"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030ac020"/>
        <function-ref name="get" scoped="" ref="0x2ae5030ac1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030ac330"/>
        <function-ref name="set" scoped="" ref="0x2ae5030ac4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030ac640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2ae5030b2020" loc="45:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2ae5030b2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030b2370"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030b24f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030b2680"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030b2808"/>
        <function-ref name="get" scoped="" ref="0x2ae5030b2990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030b2b18"/>
        <function-ref name="set" scoped="" ref="0x2ae5030b2ca0"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030b2e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2ae5030af430" loc="48:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2ae5030af430"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030af780"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030af908"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030afa90"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030afc18"/>
        <function-ref name="get" scoped="" ref="0x2ae5030afda0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030ae020"/>
        <function-ref name="set" scoped="" ref="0x2ae5030ae1a8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030ae330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2ae5030ac8c8" loc="51:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2ae5030ac8c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030acc18"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030acda0"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030ab020"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030ab1a8"/>
        <function-ref name="get" scoped="" ref="0x2ae5030ab330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030ab4b8"/>
        <function-ref name="set" scoped="" ref="0x2ae5030ab640"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030ab7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae50351a6a8" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae50351a6a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50351a9f8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50351ab80"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50351ad08"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503519020"/>
        <function-ref name="get" scoped="" ref="0x2ae5035191a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503519330"/>
        <function-ref name="set" scoped="" ref="0x2ae5035194b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503519640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae503517710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae503517710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503517a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503517be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503517d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503516020"/>
        <function-ref name="get" scoped="" ref="0x2ae5035161a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503516330"/>
        <function-ref name="set" scoped="" ref="0x2ae5035164b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503516640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae503514710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae503514710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503514a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503514be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503514d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503513020"/>
        <function-ref name="get" scoped="" ref="0x2ae5035131a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503513330"/>
        <function-ref name="set" scoped="" ref="0x2ae5035134b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503513640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae503534710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae503534710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503534a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503534be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503534d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503533020"/>
        <function-ref name="get" scoped="" ref="0x2ae5035331a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503533330"/>
        <function-ref name="set" scoped="" ref="0x2ae5035334b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503533640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae503531710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae503531710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503531a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503531be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503531d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503530020"/>
        <function-ref name="get" scoped="" ref="0x2ae5035301a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503530330"/>
        <function-ref name="set" scoped="" ref="0x2ae5035304b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503530640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae50352e710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae50352e710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50352ea60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50352ebe8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50352ed70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50352d020"/>
        <function-ref name="get" scoped="" ref="0x2ae50352d1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50352d330"/>
        <function-ref name="set" scoped="" ref="0x2ae50352d4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae50352d640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae50352b710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae50352b710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50352ba60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50352bbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50352bd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503529020"/>
        <function-ref name="get" scoped="" ref="0x2ae5035291a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503529330"/>
        <function-ref name="set" scoped="" ref="0x2ae5035294b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503529640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae503527710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae503527710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503527a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503527be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503527d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503526020"/>
        <function-ref name="get" scoped="" ref="0x2ae5035261a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503526330"/>
        <function-ref name="set" scoped="" ref="0x2ae5035264b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503526640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2ae5030b5bd8" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2ae5030b5bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030b4020"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030b41a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030b4330"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030b44b8"/>
        <function-ref name="get" scoped="" ref="0x2ae5030b4640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030b47c8"/>
        <function-ref name="set" scoped="" ref="0x2ae5030b4950"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030b4ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2ae5030c3020" loc="49:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2ae5030c3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030c3370"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030c34f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030c3680"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030c3808"/>
        <function-ref name="get" scoped="" ref="0x2ae5030c3990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030c3b18"/>
        <function-ref name="set" scoped="" ref="0x2ae5030c3ca0"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030c3e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2ae5030b7930" loc="44:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2ae5030b7930"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030b7c80"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030b7e08"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030b6020"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030b61a8"/>
        <function-ref name="get" scoped="" ref="0x2ae5030b6330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030b64b8"/>
        <function-ref name="set" scoped="" ref="0x2ae5030b6640"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030b67c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2ae5030b4d60" loc="47:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2ae5030b4d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030b30d8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030b3260"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030b33e8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030b3570"/>
        <function-ref name="get" scoped="" ref="0x2ae5030b36f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030b3880"/>
        <function-ref name="set" scoped="" ref="0x2ae5030b3a08"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030b3b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2ae5030c2120" loc="50:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2ae5030c2120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030c2470"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030c25f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030c2780"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030c2908"/>
        <function-ref name="get" scoped="" ref="0x2ae5030c2a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030c2c18"/>
        <function-ref name="set" scoped="" ref="0x2ae5030c2da0"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030c1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2ae5030b6a50" loc="45:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2ae5030b6a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030b6da0"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030b5020"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030b51a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030b5330"/>
        <function-ref name="get" scoped="" ref="0x2ae5030b54b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030b5640"/>
        <function-ref name="set" scoped="" ref="0x2ae5030b57c8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030b5950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2ae5030b3e18" loc="48:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2ae5030b3e18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030c41a8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030c4330"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030c44b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030c4640"/>
        <function-ref name="get" scoped="" ref="0x2ae5030c47c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030c4950"/>
        <function-ref name="set" scoped="" ref="0x2ae5030c4ad8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030c4c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2ae5030c12a8" loc="51:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2ae5030c12a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030c15f8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030c1780"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030c1908"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030c1a90"/>
        <function-ref name="get" scoped="" ref="0x2ae5030c1c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030c1da0"/>
        <function-ref name="set" scoped="" ref="0x2ae5030c0020"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030c01a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae50358a6a8" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae50358a6a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50358a9f8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50358ab80"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50358ad08"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503589020"/>
        <function-ref name="get" scoped="" ref="0x2ae5035891a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503589330"/>
        <function-ref name="set" scoped="" ref="0x2ae5035894b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503589640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae503587710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae503587710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503587a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503587be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503587d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503586020"/>
        <function-ref name="get" scoped="" ref="0x2ae5035861a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503586330"/>
        <function-ref name="set" scoped="" ref="0x2ae5035864b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503586640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae503584710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae503584710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503584a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503584be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503584d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503583020"/>
        <function-ref name="get" scoped="" ref="0x2ae5035831a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503583330"/>
        <function-ref name="set" scoped="" ref="0x2ae5035834b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503583640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae503581710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae503581710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503581a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503581be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503581d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503580020"/>
        <function-ref name="get" scoped="" ref="0x2ae5035801a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503580330"/>
        <function-ref name="set" scoped="" ref="0x2ae5035804b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503580640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae50357e710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae50357e710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50357ea60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50357ebe8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50357ed70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50357d020"/>
        <function-ref name="get" scoped="" ref="0x2ae50357d1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50357d330"/>
        <function-ref name="set" scoped="" ref="0x2ae50357d4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae50357d640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae50359f710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae50359f710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50359fa60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50359fbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50359fd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50359e020"/>
        <function-ref name="get" scoped="" ref="0x2ae50359e1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50359e330"/>
        <function-ref name="set" scoped="" ref="0x2ae50359e4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae50359e640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae50359c710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae50359c710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50359ca60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50359cbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50359cd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50359a020"/>
        <function-ref name="get" scoped="" ref="0x2ae50359a1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50359a330"/>
        <function-ref name="set" scoped="" ref="0x2ae50359a4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae50359a640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae503598710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae503598710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503598a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503598be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503598d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503597020"/>
        <function-ref name="get" scoped="" ref="0x2ae5035971a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503597330"/>
        <function-ref name="set" scoped="" ref="0x2ae5035974b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503597640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2ae5030ca430" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2ae5030ca430"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030ca780"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030ca908"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030caa90"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030cac18"/>
        <function-ref name="get" scoped="" ref="0x2ae5030cada0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030c9020"/>
        <function-ref name="set" scoped="" ref="0x2ae5030c91a8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030c9330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2ae5030c78c8" loc="49:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2ae5030c78c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030c7c18"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030c7da0"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030c5020"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030c51a8"/>
        <function-ref name="get" scoped="" ref="0x2ae5030c5330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030c54b8"/>
        <function-ref name="set" scoped="" ref="0x2ae5030c5640"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030c57c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2ae5030cc1e8" loc="44:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2ae5030cc1e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030cc538"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030cc6c0"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030cc848"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030cc9d0"/>
        <function-ref name="get" scoped="" ref="0x2ae5030ccb58"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030ccce0"/>
        <function-ref name="set" scoped="" ref="0x2ae5030cce68"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030cb020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2ae5030c95b8" loc="47:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2ae5030c95b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030c9908"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030c9a90"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030c9c18"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030c9da0"/>
        <function-ref name="get" scoped="" ref="0x2ae5030c8020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030c81a8"/>
        <function-ref name="set" scoped="" ref="0x2ae5030c8330"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030c84b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2ae5030c5a50" loc="50:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2ae5030c5a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030c5da0"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030d6020"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030d61a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030d6330"/>
        <function-ref name="get" scoped="" ref="0x2ae5030d64b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030d6640"/>
        <function-ref name="set" scoped="" ref="0x2ae5030d67c8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030d6950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2ae5030cb2a8" loc="45:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2ae5030cb2a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030cb5f8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030cb780"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030cb908"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030cba90"/>
        <function-ref name="get" scoped="" ref="0x2ae5030cbc18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030cbda0"/>
        <function-ref name="set" scoped="" ref="0x2ae5030ca020"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030ca1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2ae5030c8740" loc="48:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2ae5030c8740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030c8a90"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030c8c18"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030c8da0"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030c7020"/>
        <function-ref name="get" scoped="" ref="0x2ae5030c71a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030c7330"/>
        <function-ref name="set" scoped="" ref="0x2ae5030c74b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030c7640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2ae5030d6bd8" loc="51:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2ae5030d6bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030d5020"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030d51a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030d5330"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030d54b8"/>
        <function-ref name="get" scoped="" ref="0x2ae5030d5640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030d57c8"/>
        <function-ref name="set" scoped="" ref="0x2ae5030d5950"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030d5ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae5035de6a8" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae5035de6a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5035de9f8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5035deb80"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5035ded08"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5035dd020"/>
        <function-ref name="get" scoped="" ref="0x2ae5035dd1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5035dd330"/>
        <function-ref name="set" scoped="" ref="0x2ae5035dd4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5035dd640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae5035db710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae5035db710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5035dba60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5035dbbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5035dbd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5035da020"/>
        <function-ref name="get" scoped="" ref="0x2ae5035da1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5035da330"/>
        <function-ref name="set" scoped="" ref="0x2ae5035da4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5035da640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae5035fe710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae5035fe710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5035fea60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5035febe8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5035fed70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5035fd020"/>
        <function-ref name="get" scoped="" ref="0x2ae5035fd1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5035fd330"/>
        <function-ref name="set" scoped="" ref="0x2ae5035fd4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5035fd640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae5035fb710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae5035fb710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5035fba60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5035fbbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5035fbd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5035fa020"/>
        <function-ref name="get" scoped="" ref="0x2ae5035fa1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5035fa330"/>
        <function-ref name="set" scoped="" ref="0x2ae5035fa4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5035fa640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae5035f8710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae5035f8710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5035f8a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5035f8be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5035f8d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5035f7020"/>
        <function-ref name="get" scoped="" ref="0x2ae5035f71a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5035f7330"/>
        <function-ref name="set" scoped="" ref="0x2ae5035f74b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5035f7640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae5035f5710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae5035f5710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5035f5a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5035f5be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5035f5d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5035f4020"/>
        <function-ref name="get" scoped="" ref="0x2ae5035f41a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5035f4330"/>
        <function-ref name="set" scoped="" ref="0x2ae5035f44b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5035f4640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae5035f2710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae5035f2710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5035f2a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5035f2be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5035f2d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5035f1020"/>
        <function-ref name="get" scoped="" ref="0x2ae5035f11a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5035f1330"/>
        <function-ref name="set" scoped="" ref="0x2ae5035f14b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5035f1640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae5035ef710" loc="46:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae5035ef710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5035efa60"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5035efbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5035efd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5035ed020"/>
        <function-ref name="get" scoped="" ref="0x2ae5035ed1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5035ed330"/>
        <function-ref name="set" scoped="" ref="0x2ae5035ed4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5035ed640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae5030cfac0" loc="47:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae5030cfac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030cfe10"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030ef020"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030ef1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030ef330"/>
        <function-ref name="get" scoped="" ref="0x2ae5030ef4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030ef640"/>
        <function-ref name="set" scoped="" ref="0x2ae5030ef7c8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030ef950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae5030ebdb8" loc="47:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae5030ebdb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030ea170"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030ea2f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030ea480"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030ea608"/>
        <function-ref name="get" scoped="" ref="0x2ae5030ea790"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030ea918"/>
        <function-ref name="set" scoped="" ref="0x2ae5030eaaa0"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030eac28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae5030f83e0" loc="47:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae5030f83e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030f8730"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030f88b8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030f8a40"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030f8bc8"/>
        <function-ref name="get" scoped="" ref="0x2ae5030f8d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030f7020"/>
        <function-ref name="set" scoped="" ref="0x2ae5030f71a8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030f7330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae5030f37e8" loc="47:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae5030f37e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030f3b38"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030f3cc0"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030f3e48"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030f2020"/>
        <function-ref name="get" scoped="" ref="0x2ae5030f21a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030f2330"/>
        <function-ref name="set" scoped="" ref="0x2ae5030f24b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030f2640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae503100c38" loc="47:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae503100c38"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030ff020"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030ff1a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030ff330"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030ff4b8"/>
        <function-ref name="get" scoped="" ref="0x2ae5030ff640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030ff7c8"/>
        <function-ref name="set" scoped="" ref="0x2ae5030ff950"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030ffad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae5030fb020" loc="47:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae5030fb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5030fb370"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5030fb4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5030fb680"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5030fb808"/>
        <function-ref name="get" scoped="" ref="0x2ae5030fb990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5030fbb18"/>
        <function-ref name="set" scoped="" ref="0x2ae5030fbca0"/>
        <function-ref name="clr" scoped="" ref="0x2ae5030fbe28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae503108480" loc="47:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae503108480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5031087d0"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503108958"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503108ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503108c68"/>
        <function-ref name="get" scoped="" ref="0x2ae503108df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503107020"/>
        <function-ref name="set" scoped="" ref="0x2ae5031071a8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503107330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae5031157e8" loc="47:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae5031157e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503115b38"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503115cc0"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503115e48"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503114020"/>
        <function-ref name="get" scoped="" ref="0x2ae5031141a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503114330"/>
        <function-ref name="set" scoped="" ref="0x2ae5031144b8"/>
        <function-ref name="clr" scoped="" ref="0x2ae503114640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae503111970" loc="47:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae503111970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503111cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503111e48"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503110020"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5031101a8"/>
        <function-ref name="get" scoped="" ref="0x2ae503110330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5031104b8"/>
        <function-ref name="set" scoped="" ref="0x2ae503110640"/>
        <function-ref name="clr" scoped="" ref="0x2ae5031107c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae50311eab0" loc="47:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae50311eab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae50311ee00"/>
        <function-ref name="isInput" scoped="" ref="0x2ae50311d020"/>
        <function-ref name="toggle" scoped="" ref="0x2ae50311d1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae50311d330"/>
        <function-ref name="get" scoped="" ref="0x2ae50311d4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae50311d640"/>
        <function-ref name="set" scoped="" ref="0x2ae50311d7c8"/>
        <function-ref name="clr" scoped="" ref="0x2ae50311d950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae50311ac38" loc="47:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae50311ac38"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503118020"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5031181a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503118330"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5031184b8"/>
        <function-ref name="get" scoped="" ref="0x2ae503118640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5031187c8"/>
        <function-ref name="set" scoped="" ref="0x2ae503118950"/>
        <function-ref name="clr" scoped="" ref="0x2ae503118ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae503127020" loc="47:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae503127020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae503127370"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5031274f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae503127680"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503127808"/>
        <function-ref name="get" scoped="" ref="0x2ae503127990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503127b18"/>
        <function-ref name="set" scoped="" ref="0x2ae503127ca0"/>
        <function-ref name="clr" scoped="" ref="0x2ae503127e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ae503122180" loc="47:/usr/src/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ae503122180"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5031224d0"/>
        <function-ref name="isInput" scoped="" ref="0x2ae503122658"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5031227e0"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae503122968"/>
        <function-ref name="get" scoped="" ref="0x2ae503122af0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae503122c78"/>
        <function-ref name="set" scoped="" ref="0x2ae503122e00"/>
        <function-ref name="clr" scoped="" ref="0x2ae503121020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2ae5031611b8" loc="27:/usr/src/tinyos/tos/platforms/mica/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2ae5031611b8"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x2ae502ed56f0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x2ae502ed56f0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ae503161508"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x2ae5031617e8" loc="28:/usr/src/tinyos/tos/platforms/mica/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x2ae5031617e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x2ae503161b38"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x2ae503161cc0"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x2ae503161e48"/>
        <function-ref name="actualMicro" scoped="" ref="0x2ae503160020"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x2ae5031601a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x2ae50317d560" loc="60:/usr/src/tinyos/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x2ae50317d560"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ae50317d8b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x2ae502fd5e18" loc="57:/usr/src/tinyos/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x2ae502fd5e18"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x2ae50317e1a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x2ae50317ee68" loc="59:/usr/src/tinyos/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x2ae50317ee68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ae50317d1e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x2ae50317e490" loc="58:/usr/src/tinyos/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x2ae50317e490"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ae50317e7e0"/>
        <function-ref name="taskLoop" scoped="" ref="0x2ae50317e968"/>
        <function-ref name="runNextTask" scoped="" ref="0x2ae50317eaf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x2ae502edd728" loc="48:/usr/src/tinyos/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x2ae502edd728"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2ae502edda78"/>
        <function-ref name="runTask" scoped="" ref="0x2ae502eddc00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x2ae502edcbe8" loc="47:/usr/src/tinyos/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x2ae502edcbe8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ae502ed4020"/>
        <function-ref name="taskLoop" scoped="" ref="0x2ae502ed41a8"/>
        <function-ref name="runNextTask" scoped="" ref="0x2ae502ed4330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x2ae502f98b08" loc="56:/usr/src/tinyos/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x2ae502f98b08"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2ae502f98e58"/>
        <function-ref name="runTask" scoped="" ref="0x2ae502f96020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x2ae502f95020" loc="57:/usr/src/tinyos/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x2ae502f95020"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x2ae502f95370"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x2ae502f99c00" loc="55:/usr/src/tinyos/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x2ae502f99c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ae502f98020"/>
        <function-ref name="taskLoop" scoped="" ref="0x2ae502f981a8"/>
        <function-ref name="runNextTask" scoped="" ref="0x2ae502f98330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x2ae502fb97b8" loc="54:/usr/src/tinyos/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x2ae502fb97b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x2ae502fb9b08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x2ae502ee6dc8" loc="50:/usr/src/tinyos/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x2ae502ee6dc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x2ae502faf170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x2ae502fba240" loc="51:/usr/src/tinyos/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x2ae502fba240"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x2ae502fba590"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer0" ref="0x2ae50318f578" loc="52:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer0" scoped="" ref="0x2ae50318f578"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ae502f5b608"/>
            <typename><typedef-ref name="TMilli" ref="0x2ae502f5b960"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2ae50318d8f0"/>
        <function-ref name="fired" scoped="" ref="0x2ae503185020"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2ae503185d10"/>
        <function-ref name="isOneShot" scoped="" ref="0x2ae5031858c0"/>
        <function-ref name="getdt" scoped="" ref="0x2ae5031a01c0"/>
        <function-ref name="gett0" scoped="" ref="0x2ae50318dd40"/>
        <function-ref name="isRunning" scoped="" ref="0x2ae503185470"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2ae5031860f8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2ae50318d320"/>
        <function-ref name="startOneShot" scoped="" ref="0x2ae503186598"/>
        <function-ref name="stop" scoped="" ref="0x2ae503186a38"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x2ae5031a95e8" loc="56:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x2ae5031a95e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x2ae5031a9938"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer1" ref="0x2ae5031a07d8" loc="53:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer1" scoped="" ref="0x2ae5031a07d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ae502f5b608"/>
            <typename><typedef-ref name="TMilli" ref="0x2ae502f5b960"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2ae50319ca18"/>
        <function-ref name="fired" scoped="" ref="0x2ae50319e158"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2ae50319ee48"/>
        <function-ref name="isOneShot" scoped="" ref="0x2ae50319e9f8"/>
        <function-ref name="getdt" scoped="" ref="0x2ae50319b2e8"/>
        <function-ref name="gett0" scoped="" ref="0x2ae50319ce68"/>
        <function-ref name="isRunning" scoped="" ref="0x2ae50319e5a8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2ae50319f370"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2ae50319c448"/>
        <function-ref name="startOneShot" scoped="" ref="0x2ae50319f810"/>
        <function-ref name="stop" scoped="" ref="0x2ae50319fcb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x2ae5031aa020" loc="55:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x2ae5031aa020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x2ae5031aa370"/>
        <function-ref name="led0Toggle" scoped="" ref="0x2ae5031aa4f8"/>
        <function-ref name="led1On" scoped="" ref="0x2ae5031aa680"/>
        <function-ref name="led1Toggle" scoped="" ref="0x2ae5031aa808"/>
        <function-ref name="led2Toggle" scoped="" ref="0x2ae5031aa990"/>
        <function-ref name="get" scoped="" ref="0x2ae5031aab18"/>
        <function-ref name="led1Off" scoped="" ref="0x2ae5031aaca0"/>
        <function-ref name="led2Off" scoped="" ref="0x2ae5031a9330"/>
        <function-ref name="set" scoped="" ref="0x2ae5031aae28"/>
        <function-ref name="led0On" scoped="" ref="0x2ae5031a9020"/>
        <function-ref name="led2On" scoped="" ref="0x2ae5031a91a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer2" ref="0x2ae50319b900" loc="54:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer2" scoped="" ref="0x2ae50319b900"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ae502f5b608"/>
            <typename><typedef-ref name="TMilli" ref="0x2ae502f5b960"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2ae503197bc0"/>
        <function-ref name="fired" scoped="" ref="0x2ae503199278"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2ae503197020"/>
        <function-ref name="isOneShot" scoped="" ref="0x2ae503199b18"/>
        <function-ref name="getdt" scoped="" ref="0x2ae5031ab4d8"/>
        <function-ref name="gett0" scoped="" ref="0x2ae5031ab088"/>
        <function-ref name="isRunning" scoped="" ref="0x2ae5031996c8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2ae50319a490"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2ae5031975f0"/>
        <function-ref name="startOneShot" scoped="" ref="0x2ae50319a930"/>
        <function-ref name="stop" scoped="" ref="0x2ae50319add0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x2ae503187d18" loc="46:/usr/src/tinyos/tos/system/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x2ae503187d18"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x2ae5031ac0a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x2ae5031ac228"/>
        <function-ref name="led1On" scoped="" ref="0x2ae5031ac3b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x2ae5031ac538"/>
        <function-ref name="led2Toggle" scoped="" ref="0x2ae5031ac6c0"/>
        <function-ref name="get" scoped="" ref="0x2ae5031ac848"/>
        <function-ref name="led1Off" scoped="" ref="0x2ae5031ac9d0"/>
        <function-ref name="led2Off" scoped="" ref="0x2ae5031c1020"/>
        <function-ref name="set" scoped="" ref="0x2ae5031acb58"/>
        <function-ref name="led0On" scoped="" ref="0x2ae5031acce0"/>
        <function-ref name="led2On" scoped="" ref="0x2ae5031ace68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x2ae5031bdce8" loc="50:/usr/src/tinyos/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x2ae5031bdce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5031bc0a0"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5031bc228"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5031bc3b0"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5031bc538"/>
        <function-ref name="get" scoped="" ref="0x2ae5031bc6c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5031bc848"/>
        <function-ref name="set" scoped="" ref="0x2ae5031bc9d0"/>
        <function-ref name="clr" scoped="" ref="0x2ae5031bcb58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2ae5031be020" loc="46:/usr/src/tinyos/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2ae5031be020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ae5031be370"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x2ae5031bce70" loc="51:/usr/src/tinyos/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x2ae5031bce70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5031bb1e8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5031bb370"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5031bb4f8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5031bb680"/>
        <function-ref name="get" scoped="" ref="0x2ae5031bb808"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5031bb990"/>
        <function-ref name="set" scoped="" ref="0x2ae5031bbb18"/>
        <function-ref name="clr" scoped="" ref="0x2ae5031bbca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x2ae5031be5e8" loc="47:/usr/src/tinyos/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x2ae5031be5e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x2ae5031be938"/>
        <function-ref name="led0Toggle" scoped="" ref="0x2ae5031beac0"/>
        <function-ref name="led1On" scoped="" ref="0x2ae5031bec48"/>
        <function-ref name="led1Toggle" scoped="" ref="0x2ae5031bedd0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x2ae5031bd020"/>
        <function-ref name="get" scoped="" ref="0x2ae5031bd1a8"/>
        <function-ref name="led1Off" scoped="" ref="0x2ae5031bd330"/>
        <function-ref name="led2Off" scoped="" ref="0x2ae5031bd950"/>
        <function-ref name="set" scoped="" ref="0x2ae5031bd4b8"/>
        <function-ref name="led0On" scoped="" ref="0x2ae5031bd640"/>
        <function-ref name="led2On" scoped="" ref="0x2ae5031bd7c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x2ae5031ba020" loc="52:/usr/src/tinyos/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x2ae5031ba020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5031ba370"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5031ba4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5031ba680"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5031ba808"/>
        <function-ref name="get" scoped="" ref="0x2ae5031ba990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5031bab18"/>
        <function-ref name="set" scoped="" ref="0x2ae5031baca0"/>
        <function-ref name="clr" scoped="" ref="0x2ae5031bae28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x2ae5031bfe10" loc="44:/usr/src/tinyos/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x2ae5031bfe10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5031e01a8"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5031e0330"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5031e04b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5031e0640"/>
        <function-ref name="get" scoped="" ref="0x2ae5031e07c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5031e0950"/>
        <function-ref name="set" scoped="" ref="0x2ae5031e0ad8"/>
        <function-ref name="clr" scoped="" ref="0x2ae5031e0c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x2ae5031df020" loc="45:/usr/src/tinyos/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x2ae5031df020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5031df370"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5031df4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5031df680"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5031df808"/>
        <function-ref name="get" scoped="" ref="0x2ae5031df990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5031dfb18"/>
        <function-ref name="set" scoped="" ref="0x2ae5031dfca0"/>
        <function-ref name="clr" scoped="" ref="0x2ae5031dfe28"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x2ae5031dd2d8" loc="47:/usr/src/tinyos/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2ae5031dd2d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ae5031dd628"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x2ae5031de1b0" loc="46:/usr/src/tinyos/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x2ae5031de1b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ae5031de500"/>
        <function-ref name="isInput" scoped="" ref="0x2ae5031de688"/>
        <function-ref name="toggle" scoped="" ref="0x2ae5031de810"/>
        <function-ref name="isOutput" scoped="" ref="0x2ae5031de998"/>
        <function-ref name="get" scoped="" ref="0x2ae5031deb20"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ae5031deca8"/>
        <function-ref name="set" scoped="" ref="0x2ae5031dee30"/>
        <function-ref name="clr" scoped="" ref="0x2ae5031dd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2ae5031eda60" loc="45:/usr/src/tinyos/tos/system/TimerMilliC.nc">
      <component-ref qname="BlinkAppC.Timer0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2ae5031eda60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ae502f5b608"/>
            <typename><typedef-ref name="TMilli" ref="0x2ae502f5b960"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2ae5033a6d60"/>
        <function-ref name="fired" scoped="" ref="0x2ae5033a7470"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2ae5033a61c0"/>
        <function-ref name="isOneShot" scoped="" ref="0x2ae5033a7d10"/>
        <function-ref name="getdt" scoped="" ref="0x2ae5033a5648"/>
        <function-ref name="gett0" scoped="" ref="0x2ae5033a51f8"/>
        <function-ref name="isRunning" scoped="" ref="0x2ae5033a78c0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2ae5033a9620"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2ae5033a6790"/>
        <function-ref name="startOneShot" scoped="" ref="0x2ae5033a9ac0"/>
        <function-ref name="stop" scoped="" ref="0x2ae5033a7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x2ae5031e36a0" loc="49:/usr/src/tinyos/tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x2ae5031e36a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ae502f5b608"/>
            <typename><typedef-ref name="TMilli" ref="0x2ae502f5b960"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2ae5031f6a18"/>
        <function-ref name="fired" scoped="" ref="0x2ae5031f7158"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2ae5031f7e48"/>
        <function-ref name="isOneShot" scoped="" ref="0x2ae5031f79f8"/>
        <function-ref name="getdt" scoped="" ref="0x2ae5031f52e8"/>
        <function-ref name="gett0" scoped="" ref="0x2ae5031f6e68"/>
        <function-ref name="isRunning" scoped="" ref="0x2ae5031f75a8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2ae5031f8370"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2ae5031f6448"/>
        <function-ref name="startOneShot" scoped="" ref="0x2ae5031f8810"/>
        <function-ref name="stop" scoped="" ref="0x2ae5031f8cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x2ae5031f1db8" loc="46:/usr/src/tinyos/tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x2ae5031f1db8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ae502f5b608"/>
            <typename><typedef-ref name="TMilli" ref="0x2ae502f5b960"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2ae503202088"/>
        <function-ref name="fired" scoped="" ref="0x2ae5031ef708"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2ae503203470"/>
        <function-ref name="isOneShot" scoped="" ref="0x2ae503203020"/>
        <function-ref name="getdt" scoped="" ref="0x2ae503202928"/>
        <function-ref name="gett0" scoped="" ref="0x2ae5032024d8"/>
        <function-ref name="isRunning" scoped="" ref="0x2ae5031efb58"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2ae5031f0930"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2ae503203a40"/>
        <function-ref name="startOneShot" scoped="" ref="0x2ae5031f0dd0"/>
        <function-ref name="stop" scoped="" ref="0x2ae5031ef2b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x2ae5031fd298" loc="47:/usr/src/tinyos/tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x2ae5031fd298"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ae502f5b608"/>
            <typename><typedef-ref name="TMilli" ref="0x2ae502f5b960"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2ae5031fde18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2ae5031f10c0" loc="45:/usr/src/tinyos/tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2ae5031f10c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ae5031f1410"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CounterMilli32" ref="0x2ae5032053b8" loc="29:/usr/src/tinyos/tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterMilli32" scoped="" ref="0x2ae5032053b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ae502f5b608"/>
            <typename><typedef-ref name="TMilli" ref="0x2ae502f5b960"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2ae50256b608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2ae503204130"/>
        <function-ref name="clearOverflow" scoped="" ref="0x2ae503204a40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x2ae5032045b8"/>
        <function-ref name="overflow" scoped="" ref="0x2ae503215020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2ae5031ff8a8" loc="27:/usr/src/tinyos/tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2ae5031ff8a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ae5031ffbf8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AlarmMilli32" ref="0x2ae50320e1c8" loc="28:/usr/src/tinyos/tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AlarmMilli32" scoped="" ref="0x2ae50320e1c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ae502f5b608"/>
            <typename><typedef-ref name="TMilli" ref="0x2ae502f5b960"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2ae50256b608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2ae503207918"/>
        <function-ref name="fired" scoped="" ref="0x2ae503208980"/>
        <function-ref name="startAt" scoped="" ref="0x2ae503207310"/>
        <function-ref name="isRunning" scoped="" ref="0x2ae503208e08"/>
        <function-ref name="getAlarm" scoped="" ref="0x2ae503207da0"/>
        <function-ref name="start" scoped="" ref="0x2ae503208020"/>
        <function-ref name="stop" scoped="" ref="0x2ae5032084f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x2ae503310998" loc="26:/usr/src/tinyos/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x2ae503310998"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ae502f5b608"/>
            <typename><typedef-ref name="TMilli" ref="0x2ae502f5b960"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2ae50256b608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2ae50330d020"/>
        <function-ref name="fired" scoped="" ref="0x2ae50330e0c0"/>
        <function-ref name="startAt" scoped="" ref="0x2ae50330e9d0"/>
        <function-ref name="isRunning" scoped="" ref="0x2ae50330e548"/>
        <function-ref name="getAlarm" scoped="" ref="0x2ae50330d4a8"/>
        <function-ref name="start" scoped="" ref="0x2ae50330f730"/>
        <function-ref name="stop" scoped="" ref="0x2ae50330fc08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2ae5033101f0" loc="25:/usr/src/tinyos/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2ae5033101f0"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x2ae502ed5388"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x2ae502ed5388"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ae503310540"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x2ae50330da90" loc="27:/usr/src/tinyos/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x2ae50330da90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ae502f5b608"/>
            <typename><typedef-ref name="TMilli" ref="0x2ae502f5b960"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2ae50256b608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2ae50330b828"/>
        <function-ref name="clearOverflow" scoped="" ref="0x2ae50330a190"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x2ae50330bcb0"/>
        <function-ref name="overflow" scoped="" ref="0x2ae50330a618"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerCtrl" ref="0x2ae5036e2708" loc="31:/usr/src/tinyos/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x2ae5036e2708"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x2ae5036e2a58"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x2ae5036e2be0"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x2ae5036e2d68"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x2ae5036e1020"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x2ae5036e11a8"/>
        <function-ref name="setControl" scoped="" ref="0x2ae5036e1330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x2ae5036b8478" loc="26:/usr/src/tinyos/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x2ae5036b8478"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ae502f5b608"/>
            <typename><typedef-ref name="TMilli" ref="0x2ae502f5b960"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2ae50256b608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2ae5036b6b18"/>
        <function-ref name="fired" scoped="" ref="0x2ae5036b7b80"/>
        <function-ref name="startAt" scoped="" ref="0x2ae5036b6510"/>
        <function-ref name="isRunning" scoped="" ref="0x2ae5036b6088"/>
        <function-ref name="getAlarm" scoped="" ref="0x2ae5036b4020"/>
        <function-ref name="start" scoped="" ref="0x2ae5036b7220"/>
        <function-ref name="stop" scoped="" ref="0x2ae5036b76f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2ae5036b9c70" loc="25:/usr/src/tinyos/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2ae5036b9c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ae5036b8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x2ae5036b4608" loc="27:/usr/src/tinyos/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x2ae5036b4608"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ae502f5b608"/>
            <typename><typedef-ref name="TMilli" ref="0x2ae502f5b960"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2ae50256b608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2ae5036b33a8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x2ae5036b3cb8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x2ae5036b3830"/>
        <function-ref name="overflow" scoped="" ref="0x2ae5036e7190"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerAsync" ref="0x2ae5036dd8c0" loc="33:/usr/src/tinyos/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x2ae5036dd8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="controlBusy" scoped="" ref="0x2ae5036ddc10"/>
        <function-ref name="compareBusy" scoped="" ref="0x2ae5036ddd98"/>
        <function-ref name="setTimer0Asynchronous" scoped="" ref="0x2ae5036dc020"/>
        <function-ref name="countBusy" scoped="" ref="0x2ae5036dc1a8"/>
        <function-ref name="getAssr" scoped="" ref="0x2ae5036dc330"/>
        <function-ref name="setAssr" scoped="" ref="0x2ae5036dc4b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Compare" ref="0x2ae5036e16c0" loc="32:/usr/src/tinyos/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x2ae5036e16c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x2ae5036dd020"/>
        <function-ref name="fired" scoped="" ref="0x2ae5036e0d08"/>
        <function-ref name="get" scoped="" ref="0x2ae5036e03a8"/>
        <function-ref name="reset" scoped="" ref="0x2ae5036de1f8"/>
        <function-ref name="isOn" scoped="" ref="0x2ae5036dd4a8"/>
        <function-ref name="set" scoped="" ref="0x2ae5036e0830"/>
        <function-ref name="start" scoped="" ref="0x2ae5036de680"/>
        <function-ref name="stop" scoped="" ref="0x2ae5036deb08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x2ae5036e7710" loc="30:/usr/src/tinyos/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2ae5036e7710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x2ae5036e3930"/>
        <function-ref name="test" scoped="" ref="0x2ae5036e3020"/>
        <function-ref name="get" scoped="" ref="0x2ae5036e63a8"/>
        <function-ref name="setScale" scoped="" ref="0x2ae5036e3db8"/>
        <function-ref name="getScale" scoped="" ref="0x2ae5036e22f0"/>
        <function-ref name="reset" scoped="" ref="0x2ae5036e41f8"/>
        <function-ref name="overflow" scoped="" ref="0x2ae5036e6d08"/>
        <function-ref name="isOn" scoped="" ref="0x2ae5036e34a8"/>
        <function-ref name="set" scoped="" ref="0x2ae5036e6830"/>
        <function-ref name="start" scoped="" ref="0x2ae5036e4680"/>
        <function-ref name="stop" scoped="" ref="0x2ae5036e4b08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x2ae503299020" loc="48:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <component-ref qname="HplAtm128Timer0AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x2ae503299020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x2ae503299370"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x2ae5032994f8"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x2ae503299680"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x2ae503299808"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x2ae503299990"/>
        <function-ref name="setControl" scoped="" ref="0x2ae503299b18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x2ae503294228" loc="50:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <component-ref qname="HplAtm128Timer0AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x2ae503294228"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="controlBusy" scoped="" ref="0x2ae503294578"/>
        <function-ref name="compareBusy" scoped="" ref="0x2ae503294700"/>
        <function-ref name="setTimer0Asynchronous" scoped="" ref="0x2ae503294888"/>
        <function-ref name="countBusy" scoped="" ref="0x2ae503294a10"/>
        <function-ref name="getAssr" scoped="" ref="0x2ae503294b98"/>
        <function-ref name="setAssr" scoped="" ref="0x2ae503294d20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x2ae503297020" loc="49:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <component-ref qname="HplAtm128Timer0AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x2ae503297020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x2ae5032957a8"/>
        <function-ref name="fired" scoped="" ref="0x2ae503296560"/>
        <function-ref name="get" scoped="" ref="0x2ae503297ba0"/>
        <function-ref name="reset" scoped="" ref="0x2ae5032969e8"/>
        <function-ref name="isOn" scoped="" ref="0x2ae503295c30"/>
        <function-ref name="set" scoped="" ref="0x2ae503296088"/>
        <function-ref name="start" scoped="" ref="0x2ae503296e70"/>
        <function-ref name="stop" scoped="" ref="0x2ae503295320"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2ae503289de0" loc="47:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <component-ref qname="HplAtm128Timer0AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2ae503289de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x2ae50329a0f8"/>
        <function-ref name="test" scoped="" ref="0x2ae50329b798"/>
        <function-ref name="get" scoped="" ref="0x2ae503286a18"/>
        <function-ref name="setScale" scoped="" ref="0x2ae50329a580"/>
        <function-ref name="getScale" scoped="" ref="0x2ae50329aa58"/>
        <function-ref name="reset" scoped="" ref="0x2ae503285980"/>
        <function-ref name="overflow" scoped="" ref="0x2ae5032854f8"/>
        <function-ref name="isOn" scoped="" ref="0x2ae50329bc20"/>
        <function-ref name="set" scoped="" ref="0x2ae503285020"/>
        <function-ref name="start" scoped="" ref="0x2ae503285e08"/>
        <function-ref name="stop" scoped="" ref="0x2ae50329b310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x2ae5032a2160" loc="50:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x2ae5032a2160"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x2ae5032a24b0"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x2ae5032a2638"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x2ae5032a27c0"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x2ae5032a2948"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x2ae5032a2ad0"/>
        <function-ref name="setControl" scoped="" ref="0x2ae5032a2c58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x2ae50329d268" loc="52:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x2ae50329d268"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x2ae50329d5b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x2ae50329d968" loc="53:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x2ae50329d968"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="controlBusy" scoped="" ref="0x2ae50329dcb8"/>
        <function-ref name="compareBusy" scoped="" ref="0x2ae50329de40"/>
        <function-ref name="setTimer0Asynchronous" scoped="" ref="0x2ae5032b5020"/>
        <function-ref name="countBusy" scoped="" ref="0x2ae5032b51a8"/>
        <function-ref name="getAssr" scoped="" ref="0x2ae5032b5330"/>
        <function-ref name="setAssr" scoped="" ref="0x2ae5032b54b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x2ae5032a1190" loc="51:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x2ae5032a1190"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x2ae50329f930"/>
        <function-ref name="fired" scoped="" ref="0x2ae5032a06d0"/>
        <function-ref name="get" scoped="" ref="0x2ae5032a1d10"/>
        <function-ref name="reset" scoped="" ref="0x2ae5032a0b58"/>
        <function-ref name="isOn" scoped="" ref="0x2ae50329fdb8"/>
        <function-ref name="set" scoped="" ref="0x2ae5032a01f8"/>
        <function-ref name="start" scoped="" ref="0x2ae50329f020"/>
        <function-ref name="stop" scoped="" ref="0x2ae50329f4a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2ae5032a70f8" loc="49:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2ae5032a70f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x2ae5032a4270"/>
        <function-ref name="test" scoped="" ref="0x2ae5032a5930"/>
        <function-ref name="get" scoped="" ref="0x2ae5032a7c78"/>
        <function-ref name="setScale" scoped="" ref="0x2ae5032a46f8"/>
        <function-ref name="getScale" scoped="" ref="0x2ae5032a4bd0"/>
        <function-ref name="reset" scoped="" ref="0x2ae5032a6a90"/>
        <function-ref name="overflow" scoped="" ref="0x2ae5032a6608"/>
        <function-ref name="isOn" scoped="" ref="0x2ae5032a5db8"/>
        <function-ref name="set" scoped="" ref="0x2ae5032a6130"/>
        <function-ref name="start" scoped="" ref="0x2ae5032a5020"/>
        <function-ref name="stop" scoped="" ref="0x2ae5032a54a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x2ae50332ccf0" loc="74:/usr/src/tinyos/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="fired" scoped="" ref="0x2ae50332ccf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2ae5033460a0"/>
        <function-ref name="runTask" scoped="" ref="0x2ae503346228"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x2ae50332fc70" loc="49:/usr/src/tinyos/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x2ae50332fc70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ae502f5b608"/>
            <typename><typedef-ref name="TMilli" ref="0x2ae502f5b960"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2ae50256b608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2ae50332c410"/>
        <function-ref name="fired" scoped="" ref="0x2ae50332d4a8"/>
        <function-ref name="startAt" scoped="" ref="0x2ae50332ddb8"/>
        <function-ref name="isRunning" scoped="" ref="0x2ae50332d930"/>
        <function-ref name="getAlarm" scoped="" ref="0x2ae50332c898"/>
        <function-ref name="start" scoped="" ref="0x2ae50332e9f0"/>
        <function-ref name="stop" scoped="" ref="0x2ae50332d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2ae503334ab0" loc="48:/usr/src/tinyos/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2ae503334ab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ae502f5b608"/>
            <typename><typedef-ref name="TMilli" ref="0x2ae502f5b960"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2ae503331d60"/>
        <function-ref name="fired" scoped="" ref="0x2ae503332470"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2ae5033311c0"/>
        <function-ref name="isOneShot" scoped="" ref="0x2ae503332d10"/>
        <function-ref name="getdt" scoped="" ref="0x2ae50332f648"/>
        <function-ref name="gett0" scoped="" ref="0x2ae50332f1f8"/>
        <function-ref name="isRunning" scoped="" ref="0x2ae5033328c0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2ae503333620"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2ae503331790"/>
        <function-ref name="startOneShot" scoped="" ref="0x2ae503333ac0"/>
        <function-ref name="stop" scoped="" ref="0x2ae503332020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x2ae503385930" loc="71:/usr/src/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="updateFromTimer" scoped="" ref="0x2ae503385930"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2ae503385c80"/>
        <function-ref name="runTask" scoped="" ref="0x2ae503385e08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x2ae50338a858" loc="49:/usr/src/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerFrom" scoped="" ref="0x2ae50338a858"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ae502f5b608"/>
            <typename><typedef-ref name="TMilli" ref="0x2ae502f5b960"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2ae503387bc0"/>
        <function-ref name="fired" scoped="" ref="0x2ae5033881c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2ae503387020"/>
        <function-ref name="isOneShot" scoped="" ref="0x2ae503388a60"/>
        <function-ref name="getdt" scoped="" ref="0x2ae5033854d8"/>
        <function-ref name="gett0" scoped="" ref="0x2ae503385088"/>
        <function-ref name="isRunning" scoped="" ref="0x2ae503388610"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2ae5033893d8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2ae5033875f0"/>
        <function-ref name="startOneShot" scoped="" ref="0x2ae503389878"/>
        <function-ref name="stop" scoped="" ref="0x2ae503389d18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2ae5033745e0" loc="48:/usr/src/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2ae5033745e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ae502f5b608"/>
            <typename><typedef-ref name="TMilli" ref="0x2ae502f5b960"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2ae50338c988"/>
        <function-ref name="fired" scoped="" ref="0x2ae503372020"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2ae503372d70"/>
        <function-ref name="isOneShot" scoped="" ref="0x2ae503372900"/>
        <function-ref name="getdt" scoped="" ref="0x2ae50338a2d8"/>
        <function-ref name="gett0" scoped="" ref="0x2ae50338cdf8"/>
        <function-ref name="isRunning" scoped="" ref="0x2ae503372490"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2ae503373198"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2ae50338c398"/>
        <function-ref name="startOneShot" scoped="" ref="0x2ae503373658"/>
        <function-ref name="stop" scoped="" ref="0x2ae503373b18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x2ae503381128" loc="48:/usr/src/tinyos/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x2ae503381128"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ae502f5b608"/>
            <typename><typedef-ref name="TMilli" ref="0x2ae502f5b960"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2ae503381ca8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x2ae503394330" loc="49:/usr/src/tinyos/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x2ae503394330"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ae502f5b608"/>
            <typename><typedef-ref name="TMilli" ref="0x2ae502f5b960"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2ae50256b608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2ae5033930c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x2ae5033939d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x2ae503393548"/>
        <function-ref name="overflow" scoped="" ref="0x2ae503393e58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2ae5033a3020" loc="45:/usr/src/tinyos/tos/system/TimerMilliC.nc">
      <component-ref qname="BlinkAppC.Timer1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2ae5033a3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ae502f5b608"/>
            <typename><typedef-ref name="TMilli" ref="0x2ae502f5b960"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2ae50339f2b8"/>
        <function-ref name="fired" scoped="" ref="0x2ae5033a1978"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2ae5033a06c8"/>
        <function-ref name="isOneShot" scoped="" ref="0x2ae5033a0278"/>
        <function-ref name="getdt" scoped="" ref="0x2ae50339fb58"/>
        <function-ref name="gett0" scoped="" ref="0x2ae50339f708"/>
        <function-ref name="isRunning" scoped="" ref="0x2ae5033a1dc8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2ae5033a3b68"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2ae5033a0c98"/>
        <function-ref name="startOneShot" scoped="" ref="0x2ae5033a1088"/>
        <function-ref name="stop" scoped="" ref="0x2ae5033a1528"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2ae50339d550" loc="45:/usr/src/tinyos/tos/system/TimerMilliC.nc">
      <component-ref qname="BlinkAppC.Timer2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2ae50339d550"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ae502f5b608"/>
            <typename><typedef-ref name="TMilli" ref="0x2ae502f5b960"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2ae5033b6768"/>
        <function-ref name="fired" scoped="" ref="0x2ae5033b8e50"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2ae5033b7b78"/>
        <function-ref name="isOneShot" scoped="" ref="0x2ae5033b7728"/>
        <function-ref name="getdt" scoped="" ref="0x2ae5033b5088"/>
        <function-ref name="gett0" scoped="" ref="0x2ae5033b6bb8"/>
        <function-ref name="isRunning" scoped="" ref="0x2ae5033b72d8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2ae5033b80c0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2ae5033b6198"/>
        <function-ref name="startOneShot" scoped="" ref="0x2ae5033b8560"/>
        <function-ref name="stop" scoped="" ref="0x2ae5033b8a00"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="51:/usr/src/tinyos/tos/interfaces/Init.nc">
      <documentation loc="34:/usr/src/tinyos/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x2ae502fd9be8" loc="62:/usr/src/tinyos/tos/interfaces/Init.nc">
        <documentation loc="53:/usr/src/tinyos/tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2ae502ee11a8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:/usr/src/tinyos/tos/interfaces/Boot.nc">
      <documentation loc="42:/usr/src/tinyos/tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x2ae502fda7a8" loc="60:/usr/src/tinyos/tos/interfaces/Boot.nc">
        <documentation loc="51:/usr/src/tinyos/tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Calibrate" loc="26:/usr/src/tinyos/tos/chips/atm128/timer/Atm128Calibrate.nc">
      <documentation loc="11:/usr/src/tinyos/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <short>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent.</short>
        <long>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent. These include:&#60;ul>&#10; &#60;li>the ADC prescaler value necessary for full precision&#10; &#60;li>values for the UBRR registers to achieve a specific baud rate&#10; &#60;li>any adjustment necessary to values passed to some platform-provided&#10;   AlarmMicroXXC components to get more accurate timing&#10; &#60;li>the number of cycles per 1/32768s (a typical implementation of this&#10;   interface will measure this value at boot time and use it to compute&#10;   the values above)&#10; &#60;/ul>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="baudrateRegister" ref="0x2ae502fddb30" loc="60:/usr/src/tinyos/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="55:/usr/src/tinyos/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate.</short>
          <long>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate. Assumes U2X=1 (the USART is being run at&#10; double speed).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2ae50256ab98"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ae50256b608"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="baudrate" ref="0x2ae502fdd8c0" loc="60:/usr/src/tinyos/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ae50256b608"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cyclesPerJiffy" ref="0x2ae502fdf328" loc="31:/usr/src/tinyos/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="27:/usr/src/tinyos/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return CPU cycles per 1/32768s.</short>
          <long>&#10; Return CPU cycles per 1/32768s.&#10; @return CPU cycles.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2ae50256ab98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="calibrateMicro" ref="0x2ae502fdfd20" loc="39:/usr/src/tinyos/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="33:/usr/src/tinyos/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.</short>
          <long>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.&#10; @param n Time in microseconds.&#10; @return AlarmMicro argument that best approximates n microseconds.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2ae50256b608"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ae50256b608"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x2ae502fdfab0" loc="39:/usr/src/tinyos/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ae50256b608"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="actualMicro" ref="0x2ae502fde7d0" loc="46:/usr/src/tinyos/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="41:/usr/src/tinyos/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.</short>
          <long>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.&#10; @param n A time expressed in AlarmMicro time units.&#10; @return Time in microseconds that corresponds to AlarmMicro argument n.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2ae50256b608"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ae50256b608"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x2ae502fde560" loc="46:/usr/src/tinyos/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ae50256b608"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="adcPrescaler" ref="0x2ae502fdd070" loc="53:/usr/src/tinyos/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="48:/usr/src/tinyos/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.</short>
          <long>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.&#10; @return ADC prescaler value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:/usr/src/tinyos/tos/interfaces/GeneralIO.nc">
      <documentation loc="34:/usr/src/tinyos/tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x2ae502ff6ab0" loc="44:/usr/src/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x2ae502ff51d8" loc="45:/usr/src/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ae502ece9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x2ae502fe9d20" loc="42:/usr/src/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x2ae502ff3020" loc="47:/usr/src/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ae502ece9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x2ae502ff6400" loc="43:/usr/src/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ae502ece9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x2ae502ff5890" loc="46:/usr/src/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x2ae502fe9020" loc="40:/usr/src/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x2ae502fe9690" loc="41:/usr/src/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:/usr/src/tinyos/tos/interfaces/Scheduler.nc">
      <documentation loc="42:/usr/src/tinyos/tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x2ae502ed0968" loc="57:/usr/src/tinyos/tos/interfaces/Scheduler.nc">
        <documentation loc="54:/usr/src/tinyos/tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x2ae502edc878" loc="72:/usr/src/tinyos/tos/interfaces/Scheduler.nc">
        <documentation loc="67:/usr/src/tinyos/tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x2ae502edc0d8" loc="65:/usr/src/tinyos/tos/interfaces/Scheduler.nc">
        <documentation loc="59:/usr/src/tinyos/tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ae502ece9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:/usr/src/tinyos/tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x2ae502ede608" loc="67:/usr/src/tinyos/tos/interfaces/TaskBasic.nc">
        <documentation loc="57:/usr/src/tinyos/tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2ae502ee11a8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x2ae502ededf8" loc="75:/usr/src/tinyos/tos/interfaces/TaskBasic.nc">
        <documentation loc="69:/usr/src/tinyos/tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="74:/usr/src/tinyos/tos/interfaces/McuSleep.nc">
      <documentation loc="63:/usr/src/tinyos/tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @date   Oct 26, 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="sleep" ref="0x2ae502f96ca0" loc="76:/usr/src/tinyos/tos/interfaces/McuSleep.nc">
        <documentation loc="75:/usr/src/tinyos/tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:/usr/src/tinyos/tos/interfaces/McuPowerOverride.nc">
      <documentation loc="1:/usr/src/tinyos/tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x2ae502fb9328" loc="62:/usr/src/tinyos/tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:/usr/src/tinyos/tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x2ae502f3b940"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:/usr/src/tinyos/tos/interfaces/McuPowerState.nc">
      <documentation loc="35:/usr/src/tinyos/tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x2ae502fafe58" loc="52:/usr/src/tinyos/tos/interfaces/McuPowerState.nc">
        <documentation loc="47:/usr/src/tinyos/tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:/usr/src/tinyos/tos/lib/timer/Timer.nc">
      <documentation loc="36:/usr/src/tinyos/tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2ae503184370" loc="53:/usr/src/tinyos/tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2ae503184370"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x2ae503190020" loc="136:/usr/src/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="132:/usr/src/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2ae50256b608"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x2ae503195710" loc="83:/usr/src/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="80:/usr/src/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x2ae5031935b8" loc="114:/usr/src/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="100:/usr/src/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ae50256b608"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ae50256b608"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x2ae503193020" loc="114:/usr/src/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ae50256b608"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x2ae503193338" loc="114:/usr/src/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ae50256b608"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x2ae5031947b8" loc="98:/usr/src/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="94:/usr/src/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ae502ece9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x2ae50318f020" loc="151:/usr/src/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="146:/usr/src/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2ae50256b608"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x2ae503190740" loc="144:/usr/src/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="138:/usr/src/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2ae50256b608"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x2ae503194020" loc="92:/usr/src/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="86:/usr/src/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ae502ece9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x2ae503184e40" loc="64:/usr/src/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="56:/usr/src/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ae50256b608"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x2ae503184bd0" loc="64:/usr/src/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ae50256b608"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x2ae5031925b8" loc="129:/usr/src/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="116:/usr/src/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ae50256b608"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ae50256b608"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x2ae503192020" loc="129:/usr/src/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ae50256b608"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x2ae503192338" loc="129:/usr/src/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ae50256b608"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x2ae5031838a0" loc="73:/usr/src/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="66:/usr/src/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ae50256b608"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x2ae503183630" loc="73:/usr/src/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ae50256b608"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2ae503195070" loc="78:/usr/src/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="75:/usr/src/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="51:/usr/src/tinyos/tos/interfaces/Leds.nc">
      <documentation loc="33:/usr/src/tinyos/tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x2ae5031a5428" loc="61:/usr/src/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="58:/usr/src/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x2ae5031a5b60" loc="67:/usr/src/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="63:/usr/src/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x2ae5031a3328" loc="72:/usr/src/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="69:/usr/src/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x2ae5031a21d8" loc="83:/usr/src/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="79:/usr/src/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x2ae5031a1810" loc="100:/usr/src/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="96:/usr/src/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x2ae5031b6020" loc="117:/usr/src/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="103:/usr/src/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x2ae5031a3a40" loc="77:/usr/src/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="74:/usr/src/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x2ae5031b6b20" loc="134:/usr/src/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="120:/usr/src/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x2ae5031b68b0" loc="134:/usr/src/tinyos/tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x2ae5031a6cd8" loc="56:/usr/src/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="53:/usr/src/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x2ae5031a2948" loc="89:/usr/src/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="86:/usr/src/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x2ae5031a10d8" loc="94:/usr/src/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="91:/usr/src/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:/usr/src/tinyos/tos/lib/timer/LocalTime.nc">
      <documentation loc="36:/usr/src/tinyos/tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2ae5031fe518" loc="53:/usr/src/tinyos/tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2ae5031fe518"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x2ae5031feda8" loc="61:/usr/src/tinyos/tos/lib/timer/LocalTime.nc">
        <documentation loc="55:/usr/src/tinyos/tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2ae50256b608"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:/usr/src/tinyos/tos/lib/timer/Counter.nc">
      <documentation loc="36:/usr/src/tinyos/tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2ae503206a50" loc="57:/usr/src/tinyos/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2ae503206a50"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x2ae503206c80" loc="57:/usr/src/tinyos/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2ae503206c80"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x2ae503218548" loc="64:/usr/src/tinyos/tos/lib/timer/Counter.nc">
        <documentation loc="59:/usr/src/tinyos/tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2ae503206c80"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x2ae503217590" loc="76:/usr/src/tinyos/tos/lib/timer/Counter.nc">
        <documentation loc="73:/usr/src/tinyos/tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x2ae503218d60" loc="71:/usr/src/tinyos/tos/lib/timer/Counter.nc">
        <documentation loc="66:/usr/src/tinyos/tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ae502ece9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x2ae503217c80" loc="82:/usr/src/tinyos/tos/lib/timer/Counter.nc">
        <documentation loc="78:/usr/src/tinyos/tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:/usr/src/tinyos/tos/lib/timer/Alarm.nc">
      <documentation loc="36:/usr/src/tinyos/tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2ae5031fa730" loc="56:/usr/src/tinyos/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2ae5031fa730"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x2ae5031fa960" loc="56:/usr/src/tinyos/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2ae5031fa960"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x2ae503209290" loc="109:/usr/src/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="105:/usr/src/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2ae5031fa960"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x2ae50320b418" loc="78:/usr/src/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="75:/usr/src/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x2ae50320a920" loc="103:/usr/src/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="90:/usr/src/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2ae5031fa960"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2ae5031fa960"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x2ae50320a380" loc="103:/usr/src/tinyos/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2ae5031fa960"/></type-var>
          </variable>
          <variable name="dt" ref="0x2ae50320a6a0" loc="103:/usr/src/tinyos/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2ae5031fa960"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x2ae50320bb88" loc="88:/usr/src/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="81:/usr/src/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ae502ece9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x2ae503209a10" loc="116:/usr/src/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="111:/usr/src/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2ae5031fa960"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x2ae50320d4a8" loc="66:/usr/src/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="59:/usr/src/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2ae5031fa960"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x2ae50320d238" loc="66:/usr/src/tinyos/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2ae5031fa960"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2ae50320dc78" loc="73:/usr/src/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="68:/usr/src/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl8" loc="42:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <short>&#10; HPL Interface to Atmega128 8-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega128 8-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getControl" ref="0x2ae503233110" loc="45:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="44:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2ae502f68a08"/>
            <typename><typedef-ref name="Atm128TimerControl_t" ref="0x2ae502f68e10"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptFlag" ref="0x2ae5032484c0" loc="53:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="52:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2ae502f75100"/>
            <typename><typedef-ref name="Atm128_TIFR_t" ref="0x2ae502f75508"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x2ae503231328" loc="49:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="48:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2ae502f6d980"/>
            <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x2ae502f6dd88"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x2ae503231ce0" loc="50:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2ae502f6d980"/>
              <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x2ae502f6dd88"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x2ae503231a70" loc="50:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2ae502f6d980"/>
              <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x2ae502f6dd88"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x2ae503248e78" loc="54:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2ae502f75100"/>
              <typename><typedef-ref name="Atm128_TIFR_t" ref="0x2ae502f75508"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x2ae503248c08" loc="54:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2ae502f75100"/>
              <typename><typedef-ref name="Atm128_TIFR_t" ref="0x2ae502f75508"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x2ae503233ae0" loc="46:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2ae502f68a08"/>
              <typename><typedef-ref name="Atm128TimerControl_t" ref="0x2ae502f68e10"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x2ae503233870" loc="46:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2ae502f68a08"/>
              <typename><typedef-ref name="Atm128TimerControl_t" ref="0x2ae502f68e10"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerAsync" loc="15:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
      <documentation loc="11:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="controlBusy" ref="0x2ae503252c30" loc="38:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR0 is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR0 is busy (should not be updated if true)&#10; @return TRUE if TCCR0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="compareBusy" ref="0x2ae503251450" loc="44:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="40:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR0 is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR0 is busy (should not be updated if true)&#10; @return TRUE if OCR0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTimer0Asynchronous" ref="0x2ae503252528" loc="32:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="29:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Turn on timer 0 asynchronous mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="countBusy" ref="0x2ae503251c00" loc="50:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="46:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if current timer value (TCNT0) is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if current timer value (TCNT0) is busy (should not be updated if true)&#10; @return TRUE if TCNT0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAssr" ref="0x2ae503254378" loc="21:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="17:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Read timer0 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Read timer0 asynchronous status register (ASSR)&#10; @return Current value of ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2ae502f6f118"/>
            <typename><typedef-ref name="Atm128Assr_t" ref="0x2ae502f6f520"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAssr" ref="0x2ae503254d28" loc="27:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="23:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Set timer0 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Set timer0 asynchronous status register (ASSR)&#10; @param x New value for ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2ae502f6f118"/>
              <typename><typedef-ref name="Atm128Assr_t" ref="0x2ae502f6f520"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2ae503254ab8" loc="27:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2ae502f6f118"/>
              <typename><typedef-ref name="Atm128Assr_t" ref="0x2ae502f6f520"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Compare" loc="41:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Compare.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <short>&#10; HPL Interface to Atmega128 compare registers.</short>
        <long>&#10; HPL Interface to Atmega128 compare registers.&#10; @param size_type Integer type of compare register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x2ae5032365b8" loc="41:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <interfacedef-ref qname="HplAtm128Compare"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2ae5032365b8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="test" ref="0x2ae503242c50" loc="74:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="70:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Did compare interrupt occur? &#10; </short>
          <long> &#10; Did compare interrupt occur? &#10; @return TRUE if compare triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ae502ece9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x2ae503243020" loc="58:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="57:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Signalled on  interrupt.</short>
          <long> Signalled on  interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x2ae503236e70" loc="48:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="44:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Get the compare time to fire on.</short>
          <long> &#10; Get the compare time to fire on.&#10; @return  the compare time value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2ae5032365b8"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x2ae503243728" loc="62:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="61:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Clear the compare interrupt flag.</short>
          <long> Clear the compare interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x2ae5032413e0" loc="80:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="76:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Is compare interrupt on?&#10; </short>
          <long> &#10; Is compare interrupt on?&#10; @return TRUE if compare enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ae502ece9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x2ae5032457e0" loc="54:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="50:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Set the compare time to fire on.</short>
          <long> &#10; Set the compare time to fire on.&#10; @param t     the compare time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2ae5032365b8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x2ae503245570" loc="54:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Compare.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2ae5032365b8"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x2ae503243e20" loc="65:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="64:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Enable the compare interrupt.</short>
          <long> Enable the compare interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2ae503242538" loc="68:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="67:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Turn off comparee interrupts.</short>
          <long> Turn off comparee interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Timer" loc="55:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer.nc">
      <documentation loc="34:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <short>&#10; Basic interface to the hardware timers on an ATmega128.</short>
        <long>&#10; Basic interface to the hardware timers on an ATmega128.  &#10; &#60;p>&#10; This interface is designed to be independent of whether the underlying &#10; hardware is an 8-bit or 16-bit wide counter.  As such, timer_size is &#10; specified via a generics parameter.  Because this is exposing a common &#10; subset of functionality that all ATmega128 hardware timers share, all &#10; that is exposed is access to the overflow capability.  Compare and capture&#10; functionality are exposed on separate interfaces to allow easy &#10; configurability via wiring.&#10; &#60;p>&#10; This interface provides four major groups of functionality:&#60;ol>&#10;      &#60;li>Timer Value: get/set current time&#10;      &#60;li>Overflow Interrupt event&#10;      &#60;li>Control of Overflow Interrupt: start/stop/clear...&#10;      &#60;li>Timer Initialization: turn on/off clock source&#10; &#60;/ol>&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x2ae50322b870" loc="55:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <interfacedef-ref qname="HplAtm128Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x2ae50322b870"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="off" ref="0x2ae50323b020" loc="98:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="97:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off the clock.</short>
          <long> Turn off the clock. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x2ae50323c020" loc="87:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="83:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Did an overflow interrupt occur?&#10; </short>
          <long> &#10; Did an overflow interrupt occur?&#10; @return TRUE if overflow triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ae502ece9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x2ae503228178" loc="61:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="57:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get the current time.</short>
          <long> &#10; Get the current time.&#10; @return  the current time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x2ae50322b870"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setScale" ref="0x2ae50323b970" loc="104:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="100:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Turn on the clock.</short>
          <long> &#10; Turn on the clock.&#10; @param scale   Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x2ae50323b700" loc="104:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getScale" ref="0x2ae50323a178" loc="110:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="106:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get prescaler setting.</short>
          <long> &#10; Get prescaler setting.&#10; @return  Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ae50256a160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x2ae503227978" loc="75:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="74:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Clear the overflow interrupt flag.</short>
          <long> Clear the overflow interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x2ae503227258" loc="70:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="69:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Signalled on timer overflow interrupt.</short>
          <long> Signalled on timer overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x2ae50323c778" loc="93:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="89:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Is overflow interrupt on? &#10; </short>
          <long> &#10; Is overflow interrupt on? &#10; @return TRUE if overflow enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ae502ece9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x2ae503228ab0" loc="67:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="63:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Set the current time.</short>
          <long> &#10; Set the current time.&#10; @param t     the time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x2ae50322b870"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x2ae503228840" loc="67:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x2ae50322b870"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x2ae5032260d8" loc="78:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="77:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Enable the overflow interrupt.</short>
          <long> Enable the overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2ae5032267c0" loc="81:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="80:/usr/src/tinyos/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off overflow interrupts.</short>
          <long> Turn off overflow interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
